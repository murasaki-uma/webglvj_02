{"version":3,"file":"InstanceBufferParticle.js","sourceRoot":"","sources":["InstanceBufferParticle.ts"],"names":[],"mappings":"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","sourcesContent":["class InstanceBufferParticle {\n\n    public scene: THREE.Scene;\n    public camera: THREE.Camera;\n    private geometry:any;\n    private material:any;\n    private mesh:any;\n\n    private timer:number = 0;\n    public UPDATE:boolean = true;\n    public END:boolean = false;\n    private renderer:THREE.WebGLRenderer;\n\n    constructor(renderer:THREE.WebGLRenderer) {\n        this.renderer = renderer;\n        this.createScene();\n\n    }\n    public remove()\n    {\n\n\n\n        //console.log(this.scene.children);\n        while(this.scene.children.length != 0)\n        {\n            this.scene.remove(this.scene.children[0]);\n            if(this.scene.children[0] == THREE.Mesh){\n                this.scene.children[0].geometry.dispose();\n                this.scene.children[0].material.dispose();\n            }\n\n\n\n        };\n\n\n    }\n\n\n    private createScene(){\n\n        this.scene = new THREE.Scene();\n        // this.scene.fog = new THREE.Fog(0x000000,-500,3000);\n\n\n        // カメラを作成\n\n\n        this.camera = new THREE.PerspectiveCamera( 50, window.innerWidth / window.innerHeight, 1, 5000 );\n        this.camera.position.z = 1400;\n        this.scene = new THREE.Scene();\n        this.geometry = new THREE.InstancedBufferGeometry();\n        this.geometry.copy( new THREE.CircleBufferGeometry( 1, 6 ) );\n        var particleCount = 10000;\n        var translateArray = new Float32Array( particleCount * 3 );\n        for ( var i = 0, i3 = 0, l = particleCount; i < l; i ++, i3 += 3 ) {\n            translateArray[ i3 + 0 ] = Math.random() * 2 - 1;\n            translateArray[ i3 + 1 ] = Math.random() * 2 - 1;\n            translateArray[ i3 + 2 ] = Math.random() * 2 - 1;\n        }\n        this.geometry.addAttribute( \"translate\", new THREE.InstancedBufferAttribute( translateArray, 3, 1 ) );\n        this.material = new THREE.RawShaderMaterial( {\n            uniforms: {\n                map: { value: new THREE.TextureLoader().load( \"texture/circle.png\" ) },\n                time: { value: 0.0 }\n            },\n            vertexShader: document.getElementById( 'vshader_instanceParticle' ).textContent,\n            fragmentShader: document.getElementById( 'fshader_instanceParticle' ).textContent,\n            depthTest: true,\n            depthWrite: true\n        } );\n        this.mesh = new THREE.Mesh( this.geometry, this.material );\n        this.mesh.scale.set( 400, 400, 400 );\n        this.scene.add( this.mesh );\n\n    }\n\n\n\n    public endEnabled()\n    {\n        this.UPDATE = false;\n    }\n\n\n    public update() {\n\n        this.renderer.setClearColor(0x000000,0.0);\n\n\n        this.timer += 0.01;\n        //console.log(this.END);\n        if (this.UPDATE == false) {\n            //this.scene.remove(this.scene.children[0]);\n            this.remove();\n            if (this.scene.children.length == 0) {\n                this.END = true;\n            }\n\n        }\n\n\n        var time = performance.now() * 0.0005;\n        this.material.uniforms.time.value = time;\n        this.mesh.rotation.x = time * 0.2;\n        this.mesh.rotation.y = time * 0.4;\n\n        // this.camera.position.y = 100*Math.sin(this.timer);\n        // this.camera.position.x = 100* Math.cos(this.timer);\n\n        var rad = 500 + Math.sin(this.timer)*200;\n\n        this.camera.position.x = Math.sin(this.timer*0.4) * Math.cos(this.timer*0.3) * rad;\n        this.camera.position.y = Math.cos(this.timer*0.4) * rad;\n        this.camera.position.z = Math.sin(this.timer*0.4) * Math.sin(this.timer*0.3) * rad;//+Math.sin(this.timer*0.5)*200;\n\n\n        this.camera.lookAt(new THREE.Vector3(0,0,100*Math.cos(this.timer*0.005)));\n\n    }\n\n\n}\n\n"]}