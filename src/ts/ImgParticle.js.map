{"version":3,"file":"ImgParticle.js","sourceRoot":"","sources":["ImgParticle.ts"],"names":[],"mappings":"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","sourcesContent":["\n\n/// <reference path=\"typings/index.d.ts\" />\n\n// *********** ひとつめのシーン *********** //\nclass ImgParticle{\n\n    public scene: THREE.Scene;\n    public camera: THREE.Camera;\n    private timer:number = 0;\n\n    private WIDTH:number =350;\n    private PARTICLES = this.WIDTH * this.WIDTH;\n\n    private stats:Object;\n    private geometry:THREE.BufferGeometry;\n    private controls:Object;\n\n    private gpuCompute:Object;\n    private velocityVariable:any;\n    private positionVariable:any;\n    private positionUniforms:any;\n    private velocityUniforms:any;\n    private particleUniforms:any;\n    private effectController:Object;\n    private renderer:THREE.WebGLRenderer;\n\n    private imgWidth:number = 80;\n    private imgHeight:number = 100;\n\n\n    private speed:number = 1.0;\n\n    private isSpeedDown:boolean = false;\n\n    constructor(renderer:THREE.WebGLRenderer) {\n\n        this.renderer = renderer;\n        this.createScene();\n\n\n        this.initComputeRenderer();\n        this.initPosition();\n\n\n\n    }\n\n\n\n    // シーンを作る。ここでオブジェクトを格納していく。\n    private createScene(){\n\n        // シーンを作る\n        this.scene = new THREE.Scene();\n        // カメラを作成\n        this.camera = new THREE.PerspectiveCamera( 75, window.innerWidth/window.innerHeight, 0.1, 10000 );\n        this.camera.position.z = 100;\n\n\n        // this.controls = new THREE.OrbitControls( this.camera, this.renderer.domElement );\n\n    }\n\n    private initComputeRenderer() {\n\n        console.log(this.renderer);\n        // gpgpuオブジェクトのインスタンスを格納\n        this.gpuCompute = new GPUComputationRenderer( this.WIDTH, this.WIDTH, this.renderer );\n\n        // 今回はパーティクルの位置情報と、移動方向を保存するテクスチャを2つ用意します\n        var dtPosition = this.gpuCompute.createTexture();\n        var dtVelocity = this.gpuCompute.createTexture();\n        var dtColor = this.gpuCompute.createTexture();\n\n        // テクスチャにGPUで計算するために初期情報を埋めていく\n        this.fillTextures( dtPosition, dtVelocity,dtColor );\n\n        // shaderプログラムのアタッチ\n        this.velocityVariable = this.gpuCompute.addVariable( \"textureVelocity\", document.getElementById( 'computeShaderVelocity' ).textContent, dtVelocity );\n        this.positionVariable = this.gpuCompute.addVariable( \"texturePosition\", document.getElementById( 'computeShaderPosition' ).textContent, dtPosition );\n\n        // 一連の関係性を構築するためのおまじない\n        this.gpuCompute.setVariableDependencies( this.velocityVariable, [ this.positionVariable, this.velocityVariable ] );\n        this.gpuCompute.setVariableDependencies( this.positionVariable, [ this.positionVariable, this.velocityVariable ] );\n\n\n        // uniform変数を登録したい場合は以下のように作る\n\n        this.positionUniforms = this.positionVariable.material.uniforms;\n        this.velocityUniforms = this.velocityVariable.material.uniforms;\n\n        this.velocityUniforms.time = { value: 0.0 };\n        this.positionUniforms.time = { Value: 0.0 };\n        this.positionUniforms.timeStep = { Value: 1.0 };\n\n\n\n        // error処理\n        var error = this.gpuCompute.init();\n        if ( error !== null ) {\n            console.error( error );\n        }\n    }\n\n    // private restartSimulation() {\n    //     var dtPosition = this.gpuCompute.createTexture();\n    //     var dtVelocity = this.gpuCompute.createTexture();\n    //     this.fillTextures( dtPosition, dtVelocity );\n    //     this.gpuCompute.renderTexture( dtPosition, this.positionVariable.renderTargets[ 0 ] );\n    //     this.gpuCompute.renderTexture( dtPosition, this.positionVariable.renderTargets[ 1 ] );\n    //     this.gpuCompute.renderTexture( dtVelocity, this.velocityVariable.renderTargets[ 0 ] );\n    //     this.gpuCompute.renderTexture( dtVelocity, this.velocityVariable.renderTargets[ 1 ] );\n    // }\n\n    // ②パーティクルそのものの情報を決めていく。\n    private initPosition() {\n\n        // 最終的に計算された結果を反映するためのオブジェクト。\n        // 位置情報はShader側(texturePosition, textureVelocity)\n        // で決定されるので、以下のように適当にうめちゃってOK\n\n        this.geometry = new THREE.BufferGeometry();\n        var positions = new Float32Array( this.PARTICLES * 3 );\n        var p = 0;\n        for ( var i = 0; i < this.PARTICLES; i++ ) {\n            positions[ p++ ] = 0;\n            positions[ p++ ] = 0;\n            positions[ p++ ] = 0;\n        }\n\n        // uv情報の決定。テクスチャから情報を取り出すときに必要\n        var uvs = new Float32Array( this.PARTICLES * 2 );\n        p = 0;\n        for ( var j = 0; j < this.WIDTH; j++ ) {\n            for ( var i = 0; i < this.WIDTH; i++ ) {\n                uvs[ p++ ] = i / ( this.WIDTH - 1 );\n                uvs[ p++ ] = j / ( this.WIDTH - 1 );\n            }\n        }\n\n        // attributeをgeometryに登録する\n        this.geometry.addAttribute( 'position', new THREE.BufferAttribute( positions, 3 ) );\n        this.geometry.addAttribute( 'uv', new THREE.BufferAttribute( uvs, 2 ) );\n\n\n        // uniform変数をオブジェクトで定義\n        // 今回はカメラをマウスでいじれるように、計算に必要な情報もわたす。\n        this.particleUniforms = {\n            texturePosition: { value: null },\n            textureVelocity: { value: null },\n            cameraConstant: { value: this.getCameraConstant( ) },\n            map : {value:new THREE.TextureLoader().load( \"texture/MonaLisa.jpg\" )},\n            texImgWidth : {value:this.imgWidth},\n            texImgHeight : {value:this.imgHeight}\n        };\n\n\n\n        // Shaderマテリアル これはパーティクルそのものの描写に必要なシェーダー\n        var material = new THREE.ShaderMaterial( {\n            uniforms:       this.particleUniforms,\n            vertexShader:   document.getElementById( 'particleVertexShader' ).textContent,\n            fragmentShader: document.getElementById( 'particleFragmentShader' ).textContent\n        });\n        material.extensions.drawBuffers = true;\n        var particles = new THREE.Points( this.geometry, material );\n        particles.matrixAutoUpdate = false;\n        particles.updateMatrix();\n\n        particles.frustumCulled = false;\n\n        // パーティクルをシーンに追加\n        this.scene.add( particles );\n    }\n\n\n    private fillTextures( texturePosition, textureVelocity,dtColor ) {\n\n        // textureのイメージデータをいったん取り出す\n        var posArray = texturePosition.image.data;\n        var velArray = textureVelocity.image.data;\n\n        // パーティクルの初期の位置は、ランダムなXZに平面おく。\n        // 板状の正方形が描かれる\n\n        let xCounter = 1;\n        let yCounter = 1;\n\n        for ( var k = 0, kl = posArray.length; k < kl; k += 4 ) {\n            // Position\n            xCounter ++;\n            if(xCounter % this.WIDTH == 0)\n            {\n                yCounter++;\n            }\n            var x, y, z;\n            x = (-0.5 + (xCounter%this.WIDTH)/this.WIDTH)*this.imgWidth;\n            z = (-0.5 + (yCounter%this.WIDTH)/this.WIDTH)*this.imgHeight;\n            // x = Math.random()*10-5;\n            // z = Math.random()*10-5;\n            y = Math.random()*10.0;\n            // posArrayの実態は一次元配列なので\n            // x,y,z,wの順番に埋めていく。\n            // wは今回は使用しないが、配列の順番などを埋めておくといろいろ使えて便利\n            posArray[ k + 0 ] = x;\n            posArray[ k + 1 ] = y;\n            posArray[ k + 2 ] = z;\n            posArray[ k + 3 ] = Math.random()*30.0+Math.random()*20.0;\n\n            // 移動する方向はとりあえずランダムに決めてみる。\n            // これでランダムな方向にとぶパーティクルが出来上がるはず。\n            velArray[ k + 0 ] = Math.random()*2-1;\n            velArray[ k + 1 ] = Math.random()*2-1;\n            velArray[ k + 2 ] = Math.random()*2-1;\n            velArray[ k + 3 ] = Math.random()*2-1;\n\n            dtColor[ k + 0 ] = Math.random()*2-1;\n            dtColor[ k + 1 ] = Math.random()*2-1;\n            dtColor[ k + 2 ] = Math.random()*2-1;\n            dtColor[ k + 3 ] = Math.random()*2-1;\n        }\n    }\n\n    private getCameraConstant( ) {\n        return window.innerHeight / ( Math.tan( THREE.Math.DEG2RAD * 0.5 * this.camera.fov ) / this.camera.zoom );\n    }\n\n    \n    // 画面がリサイズされたときの処理\n    // ここでもシェーダー側に情報を渡す。\n    private onWindowResize() {\n        this.camera.aspect = window.innerWidth / window.innerHeight;\n        this.camera.updateProjectionMatrix();\n        this.renderer.setSize( window.innerWidth, window.innerHeight );\n        this.particleUniforms.cameraConstant.value = this.getCameraConstant( );\n    }\n\n    public click()\n    {\n\n    }\n    public keyDown(e:KeyboardEvent)\n    {\n\n        if(e.key = \"s\")\n        {\n            this.isSpeedDown = true;\n        }\n\n    }\n\n    public keyUp(e:KeyboardEvent)\n    {\n        this.isSpeedDown = false;\n    }\n\n    // ワンフレームごとの処理\n    public update() {\n\n\n        if(this.isSpeedDown)\n        {\n            this.speed = 0.5;\n        } else\n        {\n            this.speed = 1.0;\n        }\n\n        this.gpuCompute.compute();\n\n        this.renderer.setClearColor(0x000000);\n\n\n        this.particleUniforms.texturePosition.value = this.gpuCompute.getCurrentRenderTarget( this.positionVariable ).texture;\n        this.particleUniforms.textureVelocity.value = this.gpuCompute.getCurrentRenderTarget( this.velocityVariable ).texture;\n\n\n        this.velocityUniforms.time.value += 0.01*this.speed;\n        this.positionUniforms.time.value += 0.01*this.speed;\n\n\n        let step = 0.01;\n        this.timer += step*this.speed;\n        let rad = 30;\n\n        this.camera.position.x = Math.cos(this.timer) * rad;\n        this.camera.position.z = Math.sin(this.timer) * rad + 10*Math.cos(this.timer*0.5);\n\n        this.camera.position.y = Math.sin(this.timer*0.5) * rad*0.8;\n\n\n\n        let lookat = new THREE.Vector3(0,0,0);\n\n        lookat.x = Math.cos(this.timer*0.4)*1;\n        lookat.y = Math.sin(this.timer*0.2)*1;\n        lookat.z = Math.cos(this.timer*0.3)*1;\n        this.camera.lookAt(new THREE.Vector3(0,0,0));\n\n\n\n    }\n\n\n}\n\n\n\n\n"]}