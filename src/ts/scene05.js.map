{"version":3,"file":"scene05.js","sourceRoot":"","sources":["scene05.ts"],"names":[],"mappings":"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","sourcesContent":["/// <reference path=\"typings/index.d.ts\" />\n\n// *********** ひとつめのシーン *********** //\nclass Scene05{\n\n    public scene: THREE.Scene;\n    public camera: THREE.Camera;\n    private timer:number = 0;\n    private renderer:THREE.WebGLRenderer;\n    private groups:THREE.Group[] = [];\n    private simplex:Object;\n\n\n\n\n    constructor(renderer:THREE.WebGLRenderer) {\n\n\n        this.renderer = renderer;\n        this.createScene();\n\n\n    }\n\n    // シーンを作る。ここでオブジェクトを格納していく。\n    private createScene(){\n\n        // シーンを作る\n        this.scene = new THREE.Scene();\n\n        // カメラを作成\n        this.camera = new THREE.PerspectiveCamera( 75, window.innerWidth/window.innerHeight, 0.1, 10000 );\n        this.camera.position.z = 100;\n\n        let ambLight = new THREE.AmbientLight(0xffffff, 0.5);\n        this.scene.add(ambLight);\n\n\n\n\n\n\n        let dLight = new THREE.DirectionalLight(0xffffff, 0.8);\n        dLight.position.set(0,100,0);\n        this.scene.add(dLight);\n\n\n        let dLight02 = new THREE.DirectionalLight(0xffffff, 0.4);\n        dLight02.position.set(0,0,100);\n        this.scene.add(dLight02);\n\n\n\n\n        let material = new THREE.MeshPhongMaterial({\n            color:0x491e5b,\n            specular: 0xa0f8ff,\n            shininess: 10,\n            shading: THREE.FlatShading,\n            side:THREE.DoubleSide\n\n        });\n\n\n        let wireMaterial = new THREE.MeshLambertMaterial({\n            color:0xffffff,\n            wireframe:true\n\n        });\n\n\n        let convexSize = 10;\n        for(let i = 0; i < convexSize; i++)\n        {\n\n            let points = [];\n\n            let group = new THREE.Group();\n\n            let range = 50;\n\n            for (let j = 0; j < 8; j++)\n            {\n                let randomx = -range + Math.round(Math.random()*range*3);\n                let randomy = -range + Math.round(Math.random()*range*3);\n                let randomz = -range*0.5 + Math.round(Math.random()*range*2);\n\n                points.push(new THREE.Vector3(randomx,randomy,randomz));\n\n            }\n\n            //let convexGeometry = new THREE.ConvexGeometry(points);\n            let mesh = this.createConvexMesh(40*2,80*2,30*2,material);\n\n            let wireMesh = new THREE.Mesh(mesh.geometry,wireMaterial);\n            let meshScale = 1.001;\n            wireMesh.scale.set(meshScale,meshScale,meshScale);\n            wireMesh.material.wireframe = true;\n\n\n            let rad = 600;\n            let x = Math.cos(Math.PI*2/(convexSize)*i) * rad;\n            let z = Math.sin(Math.PI*2/(convexSize)*i) * rad;\n            let y = Math.sin((Math.PI*2/(convexSize)*i * 4) * 40;\n\n            group.add(mesh);\n            group.add(wireMesh);\n            group.position.set(x,y,z);\n\n            this.groups.push(group);\n            // this.scene.add(group);\n\n\n        }\n\n\n\n        for(let k = 0; k < 30; k++)\n        {\n\n            let lineGeo = new THREE.BufferGeometry();\n\n            this.simplex = new SimplexNoise();\n            let segments = 50;\n            let positions = new Float32Array( segments * 3 );\n            let colors = new Float32Array( segments * 3 );\n\n            let noiseCounter = 0.0;\n            let noiseStep = 0.001+Math.random()*0.01;\n            let x = 0.0 + Math.random()*20-10;\n            let y = 0.0 + Math.random()*20-10;\n            let z = 0.0 + Math.random()*20-10;\n            let xStep = 1.0;\n            let noiseRange = 40.0;\n            let noiseScale = 0.002;\n            let curveStep = 0.0;\n            let startRad = Math.PI*2 * Math.random();\n\n            var point = new THREE.Vector3();\n            var direction = new THREE.Vector3();\n            var lineMaterial = new THREE.LineBasicMaterial({\n                vertexColors: THREE.VertexColors,\n                linewidth: 7\n            });\n\n\n\n            let colorNum = 0.0;\n\n            for ( var i = 0; i < segments; i ++ ) {\n                // noiseCounter += noiseStep;\n                // x = xStep*i - (xStep * segments)/2;\n                // y = Math.sin(this.simplex.noise4D(x*noiseScale, y*noiseScale, z*noiseScale, noiseCounter))*1;\n                // z = Math.cos(this.simplex.noise4D(x*noiseScale, z*noiseScale, z*noiseScale, noiseCounter))*1;\n                // curveStep += 0.015;\n                //\n                // x += Math.cos(startRad+curveStep) * 400;\n                // z += Math.sin(startRad+curveStep) * 400;\n                // positions\n\n\n                direction.x += Math.random() - 0.5 + Math.sin(i*0.02);\n                direction.y += Math.random() - 0.5 + Math.sin(i*0.01);\n                direction.z += Math.random() - 0.5 + Math.cos(i*0.03);\n                direction.normalize().multiplyScalar( 10 );\n                point.add( direction );\n                // if(i > 0)\n                // {\n\n                positions[ i * 3 ] = point.x;\n                positions[ i * 3 + 1 ] = point.y;\n                positions[ i * 3 + 2 ] = point.z;\n                // colors\n                colors[ i * 3 ]     = Math.sin(i*0.01);\n                colors[ i * 3 + 1 ] = Math.sin(i*0.01);\n                colors[ i * 3 + 2 ] = Math.sin(i*0.01);\n                // colors[ i * 3 ]     = 1.0/segments * 1;\n                // colors[ i * 3 + 1 ] = 1.0/segments * 1;\n                // colors[ i * 3 + 2 ] = 1.0/segments * 1;\n                // }\n\n            }\n\n            lineGeo.addAttribute( 'position', new THREE.BufferAttribute( positions, 3 ) );\n            lineGeo.addAttribute( 'color', new THREE.BufferAttribute( colors, 3 ) );\n            lineGeo.computeBoundingSphere();\n\n            let _group = new THREE.Group();\n            for(let j = 0; j < 8; j++)\n            {\n                // (r sinsθ cosΦ, r cosθ, r sinθ sinΦ)\n\n\n                let mesh = new THREE.Line( lineGeo, lineMaterial );\n                let phi = Math.random()*Math.PI*2;\n                let theta = Math.random()*Math.PI*2;\n                let r = 40;\n                //mesh.position.set(r*Math.sin(theta)*Math.cos(phi), r*Math.cos(theta), r*Math.sin(theta)*Math.sin(theta));\n\n                mesh.position.set(0, r*Math.cos(theta), r*Math.sin(theta));\n                let randomRotate = Math.random()*1;\n                mesh.rotation.set(\n                    Math.random()*randomRotate-randomRotate/2,\n                    Math.random()*randomRotate-randomRotate/2,\n                    Math.random()*randomRotate-randomRotate/2);\n                //mesh.scale.set(10,10,10);\n                _group.add(mesh)\n\n            }\n\n            // _group.scale.set(5,5,5);\n\n            //this.scene.add( _group );\n        }\n\n\n\n        let boxGeo = new THREE.BoxBufferGeometry(10,10,10,2,2,2);\n        let boxMaterial = new THREE.MeshLambertMaterial({color:0x000000});\n\n        let xStep = 10;\n        let yStep = 0.5;\n        let size = 100;\n        let rad = 100;\n        for(var i = 0; i < size; i++)\n        {\n            let x = xStep * i - (xStep*size)/2;\n            let y = Math.cos(yStep * i) * rad*Math.sin(Math.PI*2/size * i);\n            let z = Math.sin(yStep * i) * rad;\n\n            let mesh = new THREE.Mesh(boxGeo,boxMaterial);\n            mesh.position.set(x,y,z);\n\n            this.scene.add(mesh);\n\n        }\n\n\n\n\n\n\n        let controls = new THREE.OrbitControls( this.camera, this.renderer.domElement );\n    //\n\n    }\n\n    public createConvexMesh( width, height, depth, material)\n    {\n        var points = [];\n        for (var i = 0; i < 6; i++)\n        {\n            var randomX = -width/2 + Math.round(Math.random()*width);\n            var randomY = -height/2 + Math.round(Math.random()*height);\n            var randomZ = -depth/2 + Math.round(Math.random()*depth);\n            points.push(new THREE.Vector3(randomX,randomY,randomZ));\n        }\n\n        var cvGeo = new THREE.ConvexGeometry(points);\n        var cvMesh = new THREE.Mesh(cvGeo,material);\n\n        return cvMesh;\n\n    }\n\n    public click()\n    {\n\n    }\n    public keyDown(keyCode:string)\n    {\n\n    }\n\n    // ワンフレームごとの処理\n    public update() {\n\n    }\n\n\n}\n\n\n"]}