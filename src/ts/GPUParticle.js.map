{"version":3,"file":"GPUParticle.js","sourceRoot":"","sources":["GPUParticle.ts"],"names":[],"mappings":"AAEA,IAAI,iBAAiB,GAAG;IACpB,MAAM,EAAE;QACJ,oBAAoB;QACpB,eAAe;QACf,YAAY;QACZ,gDAAgD;QAChD,oBAAoB;QACpB,iDAAiD;QACjD,gCAAgC;QAChC,iBAAiB;QACjB,wBAAwB;QACxB,yCAAyC;QACzC,GAAG;KACN,CAAC,IAAI,CAAC,IAAI,CAAC;CACf,CAAC;AAEF,IAAI,qBAAqB,GAAG;IACxB,MAAM,EAAE;QACJ,+BAA+B;QAC/B,sBAAsB;QACtB,0BAA0B;QAC1B,0BAA0B;QAC1B,0BAA0B;QAC1B,0BAA0B;QAC1B,0BAA0B;QAC1B,0BAA0B;QAC1B,0BAA0B;QAC1B,0BAA0B;QAC1B,0BAA0B;QAC1B,qBAAqB;QACrB,sBAAsB;QACtB,qBAAqB;QACrB,oBAAoB;QACpB,mEAAmE;QACnE,GAAG;QACH,eAAe;QACf,YAAY;QACZ,0BAA0B;QAC1B,gDAAgD;QAChD,0BAA0B;QAC1B,qDAAqD;QACrD,yBAAyB;QACzB,4BAA4B;QAC5B,sBAAsB;QACtB,qDAAqD;QACrD,4BAA4B;QAC5B,cAAc;QACd,iDAAiD;QACjD,gCAAgC;QAChC,kBAAkB;QAClB,uBAAuB;QACvB,0CAA0C;QAC1C,+CAA+C;QAC/C,OAAO;QACP,oBAAoB;QACpB,8BAA8B;QAC9B,8CAA8C;QAC9C,8CAA8C;QAC9C,8CAA8C;QAC9C,OAAO;QACP,wCAAwC;QACxC,GAAG;KACN,CAAC,IAAI,CAAC,IAAI,CAAC;CACf,CAAC;AAEF,IAAI,qBAAqB,GAAG;IACxB,MAAM,EACF;QACI,mBAAmB;QACnB,+BAA+B;QAC/B,qBAAqB;QACrB,wBAAwB;QACxB,wBAAwB;QACxB,wBAAwB;QACxB,sBAAsB;QACtB,yBAAyB;QACzB,uBAAuB;QACvB,kDAAkD;QAClD,GAAG;QACH,uBAAuB;QACvB,kDAAkD;QAClD,GAAG;QACH,wBAAwB;QACxB,sCAAsC;QACtC,GAAG;QACH,4BAA4B;QAC5B,GAAG;QACH,qDAAqD;QACrD,GAAG;QACH,sBAAsB;QACtB,GAAG;QACH,8CAA8C;QAC9C,+CAA+C;QAC/C,qBAAqB;QACrB,0CAA0C;QAC1C,yCAAyC;QACzC,sBAAsB;QACtB,oCAAoC;QACpC,uBAAuB;QACvB,oCAAoC;QACpC,oCAAoC;QACpC,gCAAgC;QAChC,uDAAuD;QACvD,8DAA8D;QAC9D,qBAAqB;QACrB,oBAAoB;QACpB,yCAAyC;QACzC,4DAA4D;QAC5D,sDAAsD;QACtD,+CAA+C;QAC/C,wEAAwE;QACxE,4EAA4E;QAC5E,2CAA2C;QAC3C,oCAAoC;QACpC,iEAAiE;QACjE,gCAAgC;QAChC,oDAAoD;QACpD,kCAAkC;QAClC,kCAAkC;QAClC,qCAAqC;QACrC,mCAAmC;QACnC,mCAAmC;QACnC,oCAAoC;QACpC,oCAAoC;QACpC,oCAAoC;QACpC,2CAA2C;QAC3C,2CAA2C;QAC3C,gCAAgC;QAChC,gCAAgC;QAChC,gCAAgC;QAChC,gCAAgC;QAChC,2BAA2B;QAC3B,uFAAuF;QACvF,mBAAmB;QACnB,mBAAmB;QACnB,mBAAmB;QACnB,mBAAmB;QACnB,8BAA8B;QAC9B,oFAAoF;QACpF,gBAAgB;QAChB,2DAA2D;QAC3D,iDAAiD;QACjD,GAAG;QACH,yCAAyC;QACzC,eAAe;QACf,YAAY;QACZ,gDAAgD;QAChD,qBAAqB;QACrB,kBAAkB;QAClB,qDAAqD;QACrD,4BAA4B;QAC5B,kBAAkB;QAClB,qDAAqD;QACrD,4BAA4B;QAC5B,cAAc;QACd,iDAAiD;QACjD,gCAAgC;QAChC,yBAAyB;QACzB,gDAAgD;QAChD,gDAAgD;QAChD,gDAAgD;QAChD,qCAAqC;QACrC,4BAA4B;QAC5B,sBAAsB;QACtB,2DAA2D;QAC3D,+BAA+B;QAC/B,wDAAwD;QACxD,wDAAwD;QACxD,wDAAwD;QACxD,mBAAmB;QACnB,sBAAsB;QACtB,uBAAuB;QACvB,0DAA0D;QAC1D,GAAG;KAGN,CAAC,IAAI,CAAC,IAAI,CAAC;CACnB,CAAC;AAEF,IAAI,cAAc,GAClB;IACI,YAAY,EACR;QACI,wBAAwB;QACxB,mBAAmB;QACnB,oCAAoC;QACpC,oCAAoC;QACpC,+BAA+B;QAC/B,wBAAwB;QACxB,mBAAmB;QACnB,uBAAuB;QACvB,eAAe;QACf,kBAAkB;QAClB,sDAAsD;QACtD,6BAA6B;QAC7B,2DAA2D;QAC3D,+DAA+D;QAC/D,eAAe;QACf,kDAAkD;QAClD,GAAG;KAEN,CAAC,IAAI,CAAC,IAAI,CAAC;IAChB,cAAc,EACV;QACI,sBAAsB;QACtB,wBAAwB;QACxB,mBAAmB;QACnB,sBAAsB;QACtB,qBAAqB;QACrB,yBAAyB;QACzB,qBAAqB;QACrB,yCAAyC;QACzC,yCAAyC;QACzC,yCAAyC;QACzC,wCAAwC;QACxC,GAAG;QACH,0BAA0B;QAC1B,iCAAiC;QACjC,uDAAuD;QACvD,qCAAqC;QACrC,GAAG;QACH,eAAe;QACf,uBAAuB;QACvB,gDAAgD;QAChD,6DAA6D;QAC7D,uBAAuB;QACvB,kBAAkB;QAClB,OAAO;QACP,wCAAwC;QACxC,GAAG;KAEN,CAAC,IAAI,CAAC,IAAI,CAAC;CACnB,CAAC;AAGF;IAqCI,uBAAY,KAAiB,EAAE,MAAmB,EAAE,QAA4B,EAAC,KAAY,EAAC,QAAsB,EAAC,KAAiB;QAGlI,IAAI,CAAC,OAAO,GAAG,IAAI,YAAY,EAAE,CAAC;QAElC,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,SAAS,GAAI,GAAG,GAAG,GAAG,CAAC;QAE5B,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACzB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QAEnB,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;QACtB,IAAI,CAAC,KAAK,GAAG,IAAI,KAAK,CAAC,KAAK,EAAE,CAAC;QAC/B,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,EAAC,QAAQ,CAAC,CAAC,EAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;QAC1D,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC;QACpC,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC;QACpC,IAAI,CAAC,mBAAmB,EAAE,CAAC;QAC3B,IAAI,CAAC,YAAY,EAAE,CAAC;QAIpB,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;QAGvB,IAAI,CAAC,gBAAgB,EAAE,CAAC;IAC5B,CAAC;IAIM,oCAAY,GAAnB,UAAoB,CAAC,EAAC,CAAC,EAAC,CAAC;QAErB,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;QACtB,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;QACtB,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;IAC1B,CAAC;IAGO,2CAAmB,GAA3B;QAGI,IAAI,CAAC,UAAU,GAAG,IAAI,sBAAsB,CAAE,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,QAAQ,CAAE,CAAC;QAEtF,IAAI,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC,aAAa,EAAE,CAAC;QAEjD,IAAI,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC,aAAa,EAAE,CAAC;QAEjD,IAAI,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,aAAa,EAAE,CAAC;QAG/C,IAAI,CAAC,YAAY,CAAC,UAAU,EAAE,UAAU,EAAC,QAAQ,CAAC,CAAC;QACnD,IAAI,CAAC,aAAa,GAAG,UAAU,CAAC;QAIhC,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,CAAE,iBAAiB,EAAC,qBAAqB,CAAC,MAAM,EAAE,UAAU,CAAE,CAAC;QAClH,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,CAAE,iBAAiB,EAAE,qBAAqB,CAAC,MAAM,EAAE,UAAU,CAAE,CAAC;QACnH,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,CAAE,aAAa,EAAE,iBAAiB,CAAC,MAAM,EAAE,QAAQ,CAAE,CAAC;QAGvG,IAAI,CAAC,UAAU,CAAC,uBAAuB,CAAE,IAAI,CAAC,gBAAgB,EAAE,CAAE,IAAI,CAAC,gBAAgB,EAAE,IAAI,CAAC,gBAAgB,EAAE,IAAI,CAAC,cAAc,CAAE,CAAE,CAAC;QACxI,IAAI,CAAC,UAAU,CAAC,uBAAuB,CAAE,IAAI,CAAC,gBAAgB,EAAE,CAAE,IAAI,CAAC,gBAAgB,EAAE,IAAI,CAAC,gBAAgB,EAAE,IAAI,CAAC,cAAc,CAAE,CAAE,CAAC;QACxI,IAAI,CAAC,UAAU,CAAC,uBAAuB,CAAE,IAAI,CAAC,cAAc,EAAI,CAAE,IAAI,CAAC,gBAAgB,EAAE,IAAI,CAAC,gBAAgB,EAAE,IAAI,CAAC,cAAc,CAAE,CAAE,CAAC;QAIxI,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC,gBAAgB,CAAC,QAAQ,CAAC,QAAQ,CAAC;QAChE,IAAI,CAAC,cAAc,GAAK,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,QAAQ,CAAC;QAC9D,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC,gBAAgB,CAAC,QAAQ,CAAC,QAAQ,CAAC;QAChE,IAAI,CAAC,gBAAgB,CAAC,IAAI,GAAG,EAAE,KAAK,EAAE,GAAG,EAAE,CAAC;QAC5C,IAAI,CAAC,gBAAgB,CAAC,OAAO,GAAG,EAAE,KAAK,EAAE,IAAI,CAAC,MAAM,EAAE,EAAE,CAAC;QACzD,IAAI,CAAC,gBAAgB,CAAC,OAAO,GAAG,EAAE,KAAK,EAAE,IAAI,CAAC,MAAM,EAAE,EAAE,CAAC;QACzD,IAAI,CAAC,gBAAgB,CAAC,OAAO,GAAG,EAAE,KAAK,EAAE,IAAI,CAAC,MAAM,EAAE,EAAE,CAAC;QACzD,IAAI,CAAC,gBAAgB,CAAC,KAAK,GAAG,EAAE,KAAK,EAAE,GAAG,EAAE,CAAC;QAC7C,IAAI,CAAC,gBAAgB,CAAC,IAAI,GAAG,EAAE,KAAK,EAAE,GAAG,EAAE,CAAC;QAE5C,IAAI,CAAC,gBAAgB,CAAC,KAAK,GAAG,EAAE,KAAK,EAAE,GAAG,EAAE,CAAC;QAC7C,IAAI,IAAI,GAAG,GAAG,CAAC;QACf,IAAI,CAAC,gBAAgB,CAAC,MAAM,GAAG,EAAC,KAAK,EAAE,IAAI,CAAC,MAAM,EAAE,GAAC,IAAI,EAAC,CAAC;QAC3D,IAAI,CAAC,gBAAgB,CAAC,MAAM,GAAG,EAAC,KAAK,EAAE,IAAI,CAAC,MAAM,EAAE,GAAC,IAAI,EAAC,CAAC;QAC3D,IAAI,CAAC,gBAAgB,CAAC,MAAM,GAAG,EAAC,KAAK,EAAE,IAAI,CAAC,MAAM,EAAE,GAAC,IAAI,EAAC,CAAC;QAC3D,IAAI,CAAC,gBAAgB,CAAC,KAAK,GAAG,EAAC,KAAK,EAAE,CAAC,IAAI,GAAC,IAAI,CAAC,MAAM,EAAE,GAAC,IAAI,GAAC,KAAK,CAAC,EAAC,CAAC;QACvE,IAAI,CAAC,gBAAgB,CAAC,SAAS,GAAG,EAAC,KAAK,EAAE,IAAI,CAAC,QAAQ,EAAC,CAAC;QAEzD,IAAI,KAAK,GAAG,IAAI,CAAC,UAAU,CAAC,IAAI,EAAE,CAAC;QACnC,EAAE,CAAC,CAAE,KAAK,KAAK,IAAK,CAAC,CAAC,CAAC;YACnB,OAAO,CAAC,KAAK,CAAE,KAAK,CAAE,CAAC;QAC3B,CAAC;IAEL,CAAC;IACO,oCAAY,GAApB;QAGI,IAAI,CAAC,QAAQ,GAAG,IAAI,KAAK,CAAC,cAAc,EAAE,CAAC;QAC3C,IAAI,SAAS,GAAG,IAAI,YAAY,CAAE,IAAI,CAAC,SAAS,GAAG,CAAC,CAAE,CAAC;QACvD,IAAI,CAAC,GAAG,CAAC,CAAC;QAEV,IAAI,QAAQ,GAAG,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,IAAI,CAAC;QAE7C,GAAG,CAAC,CAAE,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,SAAS,EAAE,CAAC,EAAE,EAAG,CAAC;YAExC,CAAC,EAAE,CAAC;YACJ,SAAS,CAAE,CAAC,CAAE,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC;YAE7B,CAAC,EAAE,CAAC;YACJ,SAAS,CAAE,CAAC,CAAE,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC;YAE7B,CAAC,EAAE,CAAC;YACJ,SAAS,CAAE,CAAC,CAAE,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC;QACjC,CAAC;QAGD,IAAI,GAAG,GAAG,IAAI,YAAY,CAAE,IAAI,CAAC,SAAS,GAAG,CAAC,CAAE,CAAC;QACjD,CAAC,GAAG,CAAC,CAAC;QACN,GAAG,CAAC,CAAE,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,KAAK,EAAE,CAAC,EAAE,EAAG,CAAC;YACpC,GAAG,CAAC,CAAE,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,KAAK,EAAE,CAAC,EAAE,EAAG,CAAC;gBACpC,GAAG,CAAE,CAAC,EAAE,CAAE,GAAG,CAAC,GAAG,CAAE,IAAI,CAAC,KAAK,GAAG,CAAC,CAAE,CAAC;gBACpC,GAAG,CAAE,CAAC,EAAE,CAAE,GAAG,CAAC,GAAG,CAAE,IAAI,CAAC,KAAK,GAAG,CAAC,CAAE,CAAC;YACxC,CAAC;QACL,CAAC;QAID,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAE,UAAU,EAAE,IAAI,KAAK,CAAC,eAAe,CAAE,SAAS,EAAE,CAAC,CAAE,CAAE,CAAC;QACpF,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAE,IAAI,EAAE,IAAI,KAAK,CAAC,eAAe,CAAE,GAAG,EAAE,CAAC,CAAE,CAAE,CAAC;QAIxE,IAAI,QAAQ,GAAI,IAAI,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;QAE1E,IAAI,CAAC,gBAAgB,GAAG;YACpB,GAAG,EAAE,EAAE,KAAK,EAAE,IAAI,KAAK,CAAC,aAAa,EAAE,CAAC,IAAI,CAAE,uBAAuB,CAAE,EAAE;YACzE,eAAe,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE;YAChC,eAAe,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE;YAChC,KAAK,EAAC,EAAC,KAAK,EAAC,GAAG,EAAC;YACjB,KAAK,EAAE,EAAC,KAAK,EAAE,QAAQ,EAAC;YACxB,cAAc,EAAE,EAAE,KAAK,EAAE,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE;SACjE,CAAC;QAGF,IAAI,QAAQ,GAAG,IAAI,KAAK,CAAC,cAAc,CAAE;YACrC,QAAQ,EAAQ,IAAI,CAAC,gBAAgB;YACrC,YAAY,EAAI,cAAc,CAAC,YAAY;YAC3C,cAAc,EAAE,cAAc,CAAC,cAAc;YAC7C,WAAW,EAAE,IAAI;SACpB,CAAC,CAAC;QAEH,QAAQ,CAAC,UAAU,CAAC,WAAW,GAAG,IAAI,CAAC;QAEvC,IAAI,CAAC,QAAQ,GAAG,IAAI,KAAK,CAAC,MAAM,CAAE,IAAI,CAAC,QAAQ,EAAE,QAAQ,CAAE,CAAC;QAC5D,IAAI,CAAC,QAAQ,CAAC,gBAAgB,GAAG,KAAK,CAAC;QACvC,IAAI,CAAC,QAAQ,CAAC,YAAY,EAAE,CAAC;QAC7B,IAAI,CAAC,QAAQ,CAAC,aAAa,GAAG,KAAK,CAAC;QAGpC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QAM9B,IAAI,CAAC,KAAK,CAAC,GAAG,CAAE,IAAI,CAAC,KAAK,CAAE,CAAC;IAEjC,CAAC;IAGO,oCAAY,GAApB,UAAqB,eAAe,EAAE,eAAe,EAAC,WAAW;QAG7D,IAAI,QAAQ,GAAG,eAAe,CAAC,KAAK,CAAC,IAAI,CAAC;QAC1C,IAAI,QAAQ,GAAG,eAAe,CAAC,KAAK,CAAC,IAAI,CAAC;QAC1C,IAAI,WAAW,GAAG,WAAW,CAAC,KAAK,CAAC,IAAI,CAAC;QAEzC,IAAI,MAAM,GAAG,CAAC,CAAC;QACf,GAAG,CAAC,CAAE,IAAI,CAAC,GAAG,CAAC,EAAE,EAAE,GAAG,QAAQ,CAAC,MAAM,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,IAAI,CAAC,EAAG,CAAC;YAErD,IAAI,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;YACZ,IAAI,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC;YAG1B,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,GAAC,KAAK,GAAC,KAAK,GAAC,CAAC,CAAC;YAChC,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,GAAC,KAAK,GAAC,KAAK,GAAC,CAAC,CAAC;YAChC,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,GAAC,KAAK,GAAC,KAAK,GAAC,CAAC,CAAC;YAEhC,MAAM,IAAI,IAAI,CAAC;YACf,IAAI,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,GAAC,GAAG,EAAC,CAAC,GAAC,GAAG,EAAC,MAAM,CAAC,CAAC;YAErD,QAAQ,CAAE,CAAC,GAAG,CAAC,CAAE,GAAG,CAAC,CAAC;YACtB,QAAQ,CAAE,CAAC,GAAG,CAAC,CAAE,GAAG,KAAK,CAAC;YAC1B,QAAQ,CAAE,CAAC,GAAG,CAAC,CAAE,GAAG,CAAC,CAAC;YACtB,QAAQ,CAAE,CAAC,GAAG,CAAC,CAAE,GAAG,GAAG,CAAC;YACxB,QAAQ,CAAE,CAAC,GAAG,CAAC,CAAE,GAAG,IAAI,CAAC,MAAM,EAAE,GAAC,GAAG,GAAC,GAAG,CAAC;YAC1C,QAAQ,CAAE,CAAC,GAAG,CAAC,CAAE,GAAG,IAAI,CAAC,MAAM,EAAE,GAAC,GAAG,GAAC,GAAG,CAAC;YAC1C,QAAQ,CAAE,CAAC,GAAG,CAAC,CAAE,GAAG,IAAI,CAAC,MAAM,EAAE,GAAC,GAAG,GAAC,GAAG,CAAC;YAC1C,QAAQ,CAAE,CAAC,GAAG,CAAC,CAAE,GAAG,IAAI,CAAC,MAAM,EAAE,GAAC,GAAG,GAAC,GAAG,CAAC;YAE1C,WAAW,CAAE,CAAC,GAAG,CAAC,CAAE,GAAG,CAAC,CAAC;YACzB,WAAW,CAAE,CAAC,GAAG,CAAC,CAAE,GAAG,CAAC,CAAC;YACzB,WAAW,CAAE,CAAC,GAAG,CAAC,CAAE,GAAG,CAAC,CAAC;YACzB,WAAW,CAAE,CAAC,GAAG,CAAC,CAAE,GAAG,CAAC,CAAC;QAC7B,CAAC;IAEL,CAAC;IAEM,yCAAiB,GAAxB,UAAyB,MAAM;QAE3B,MAAM,CAAC,MAAM,CAAC,WAAW,GAAG,CAAE,IAAI,CAAC,GAAG,CAAE,KAAK,CAAC,IAAI,CAAC,OAAO,GAAG,GAAG,GAAG,MAAM,CAAC,GAAG,CAAE,GAAG,MAAM,CAAC,IAAI,CAAE,CAAC;IACpG,CAAC;IAEM,8BAAM,GAAb;QAEI,IAAI,CAAC,gBAAgB,CAAC,cAAc,CAAC,KAAK,GAAG,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IACrF,CAAC;IAEM,mCAAW,GAAlB,UAAmB,GAAG;QAElB,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,EAAC,GAAG,CAAC,CAAC,EAAC,GAAG,CAAC,CAAC,CAAC,CAAA;IAE9C,CAAC;IAEM,4BAAI,GAAX;QAEI,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,KAAK,GAAG,GAAG,CAAC;IAC3C,CAAC;IAEM,wCAAgB,GAAvB;QAGI,IAAI,CAAC,UAAU,CAAC,OAAO,EAAE,CAAC;QAE1B,IAAI,CAAC,gBAAgB,CAAC,eAAe,CAAC,KAAK,GAAG,IAAI,CAAC,UAAU,CAAC,sBAAsB,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC,OAAO,CAAC;QAEpH,IAAI,CAAC,gBAAgB,CAAC,eAAe,CAAC,KAAK,GAAG,IAAI,CAAC,UAAU,CAAC,sBAAsB,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC,OAAO,CAAC;QAEpH,IAAI,CAAC,gBAAgB,CAAC,SAAS,CAAC,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC;IAC1D,CAAC;IAGM,8BAAM,GAAb;QAEI,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAG,QAAQ,EAAE,GAAG,CAAE,CAAC;QAK9C,EAAE,CAAA,CAAC,IAAI,CAAC,WAAW,CAAC,CACpB,CAAC;YAEG,IAAI,CAAC,gBAAgB,EAAE,CAAC;QAE5B,CAAC;IAKL,CAAC;IAEL,oBAAC;AAAD,CAAC,AAvSD,IAuSC;AAGD;IAuBI,4BAAY,QAAQ;QAfb,WAAM,GAAW,IAAI,CAAC;QACtB,QAAG,GAAW,KAAK,CAAC;QAMnB,iBAAY,GAAU,CAAC,CAAC;QACxB,aAAQ,GAAW,KAAK,CAAC;QAEzB,UAAK,GAAU,GAAG,CAAC;QASvB,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAA;QACxB,IAAI,CAAC,MAAM,GAAG,IAAI,KAAK,CAAC,iBAAiB,CAAE,GAAG,EAAE,MAAM,CAAC,UAAU,GAAG,MAAM,CAAC,WAAW,EAAE,CAAC,EAAC,KAAK,CAAE,CAAC;QAClG,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC;QAC3B,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,GAAG,GAAG,CAAC;QAC7B,IAAI,CAAC,KAAK,GAAG,IAAI,KAAK,CAAC,KAAK,EAAE,CAAC;QAG3B,IAAI,GAAG,GAAG,CAAC,CAAC;QAEZ,IAAI,OAAO,GACX;YACI,SAAS,EAAC,GAAG,GAAC,CAAC,CAAC;YAChB,OAAO,EAAC,GAAG,GAAC,CAAC;YACb,CAAC,EAAC,IAAI,CAAC,MAAM,EAAE,GAAC,GAAG;YACnB,CAAC,EAAC,IAAI,CAAC,MAAM,EAAE,GAAC,GAAG;YACnB,OAAO,EAAC,IAAI,CAAC,MAAM,EAAE,GAAC,GAAG;YACzB,OAAO,EAAC,IAAI,CAAC,MAAM,EAAE,GAAC,GAAG;YACzB,OAAO,EAAC,IAAI,CAAC,MAAM,EAAE,GAAC,GAAG;SAC5B,CAAC;QACF,IAAI,CAAC,cAAc,GAAG,OAAO,CAAC;QAE9B,IAAI,QAAQ,GAAG,IAAI,KAAK,CAAC,OAAO,CAAC,GAAG,GAAC,CAAC,GAAG,GAAC,IAAI,CAAC,MAAM,EAAE,GAAC,GAAG,CAAC,EAAC,IAAI,CAAC,MAAM,EAAE,GAAC,GAAG,GAAC,GAAG,EAAC,IAAI,CAAC,MAAM,EAAE,GAAC,GAAG,GAAC,GAAG,CAAC,CAAC;QAC1G,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC;QACzB,IAAI,KAAK,GAAG,IAAI,KAAK,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;QAEtC,IAAI,CAAC,WAAW,GAAG,IAAI,aAAa,CAAC,IAAI,CAAC,KAAK,EAAC,IAAI,CAAC,MAAM,EAAC,IAAI,CAAC,QAAQ,EAAC,GAAG,EAAC,QAAQ,EAAC,KAAK,CAAC,CAAC;QAKlG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,KAAK,CAAC,YAAY,CAAC,QAAQ,EAAC,GAAG,CAAC,CAAC,CAAC;QACrD,IAAI,MAAM,GAAG,IAAI,KAAK,CAAC,gBAAgB,CAAC,QAAQ,EAAC,GAAG,CAAC,CAAC;QACtD,MAAM,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,EAAC,GAAG,EAAC,CAAC,CAAC,CAAC;QAC7B,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;QAEvB,IAAI,MAAM,GAAG,IAAI,KAAK,CAAC,gBAAgB,CAAC,QAAQ,EAAC,GAAG,CAAC,CAAC;QACtD,MAAM,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,EAAC,CAAC,EAAC,GAAG,CAAC,CAAC;QAC7B,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;IAK3B,CAAC;IAEM,kCAAK,GAAZ;IAGA,CAAC;IAEM,oCAAO,GAAd,UAAe,KAAK;IAGpB,CAAC;IAGO,8CAAiB,GAAzB;QAEI,IAAI,CAAC,QAAQ,GAAG,IAAI,KAAK,CAAC,aAAa,CAAC,IAAI,CAAC,MAAM,EAAC,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC;QAC9E,IAAI,CAAC,QAAQ,CAAC,UAAU,GAAG,KAAK,CAAC;IACrC,CAAC;IAEM,mCAAM,GAAb;QAEQ,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE,CAAC;IAElC,CAAC;IAOM,mCAAM,GAAb;QAKI,OAAM,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,MAAM,IAAI,CAAC,EACrC,CAAC;YACG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;YAC1C,EAAE,CAAA,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,IAAI,KAAK,CAAC,IAAI,CAAC,CAAA,CAAC;gBACrC,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,OAAO,EAAE,CAAC;gBAC1C,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,OAAO,EAAE,CAAC;YAC9C,CAAC;QAEL,CAAC;QAAA,CAAC;IAGN,CAAC;IACM,uCAAU,GAAjB;QAEI,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;IACxB,CAAC;IAEM,kCAAK,GAAZ;QAEI,EAAE,CAAA,CAAC,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,CAC/C,CAAC;QAID,CAAC;QAED,EAAE,CAAA,CAAC,IAAI,CAAC,YAAY,IAAI,CAAC,CAAC,CAC1B,CAAC;YACG,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;QACzB,CAAC;QAED,EAAE,CAAA,CAAC,IAAI,CAAC,YAAY,IAAI,CAAC,CAAC,CAC1B,CAAC;YACG,IAAI,CAAC,WAAW,CAAC,WAAW,GAAG,IAAI,CAAC;QAExC,CAAC;QAAC,IAAI,CAAC,CAAC;QAER,CAAC;QAGD,IAAI,CAAC,YAAY,EAAE,CAAC;IAKxB,CAAC;IAEM,mCAAM,GAAb;QAGI,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE,CAAC;IAK9B,CAAC;IAGL,yBAAC;AAAD,CAAC,AAlKD,IAkKC","sourcesContent":["/// <reference path=\"typings/index.d.ts\" />\n\nvar offsetValueShader = {\n    shader: [\n        '#define delta 10.0',\n        'void main() {',\n        '    // 正規化',\n        '    vec2 uv = gl_FragCoord.xy / resolution.xy;',\n        '    // offsetの取り出し',\n        '    vec4 offsetV = texture2D( offsetValue, uv);',\n        '    vec3 offset = offsetV.xyz;',\n        '    // Dynamics',\n        '    // ベクトルに速度を掛けて値を更新',\n        '    gl_FragColor = vec4( offset, 1.0 );',\n        '}'\n    ].join(\"\\n\")\n};\n\nvar computeShaderPosition = {\n    shader: [\n        '#define delta ( 1.0 / 100.0 )',\n        'uniform float alpha;',\n        'uniform float offsetA_x;',\n        'uniform float offsetA_y;',\n        'uniform float offsetA_z;',\n        'uniform float offsetB_x;',\n        'uniform float offsetB_y;',\n        'uniform float offsetB_z;',\n        'uniform float offsetC_x;',\n        'uniform float offsetC_y;',\n        'uniform float offsetC_z;',\n        'uniform float time;',\n        'uniform float speed;',\n        'uniform float init;',\n        'float rnd(vec2 p){',\n        '    return fract(sin(dot(p ,vec2(12.9898,78.233))) * 43758.5453);',\n        '}',\n        'void main() {',\n        '    // 正規化',\n        '    float nScale = 0.02;',\n        '    vec2 uv = gl_FragCoord.xy / resolution.xy;',\n        '    // テクスチャーから位置情報の取り出し',\n        '    vec4 tmpPos = texture2D( texturePosition, uv );',\n        '    float w = tmpPos.w;',\n        '    vec3 pos = tmpPos.xyz;',\n        '    // 移動するベクトルの取り出し',\n        '    vec4 tmpVel = texture2D( textureVelocity, uv );',\n        '    vec3 vel = tmpVel.xyz;',\n        '    // 最初の位置',\n        '    vec4 offsetV = texture2D( offsetValue, uv);',\n        '    vec3 offset = offsetV.xyz;',\n        '    //w -= 0.01;',\n        '    pos += vel*speed;',\n        '    if(init == 1.0) {pos = offsetV.xyz;}',\n        '    if(distance(pos.xyz,offsetV.xyz) > 200.0)',\n        '    {',\n        '        //w = 0.0;',\n        '        //pos =　offsetV.xyz;',\n        '        //pos.x = rnd(offset.xy)*100.0-50.0;',\n        '        //pos.y = rnd(offset.yz)*100.0-50.0;',\n        '        //pos.z = rnd(offset.zx)*100.0-50.0;',\n        '    }',\n        '    gl_FragColor = vec4( pos.xyz, w );',\n        '}'\n    ].join(\"\\n\")\n};\n\nvar computeShaderVelocity = {\n    shader:\n        [\n            '#include <common>',\n            '#define delta ( 1.0 / 200.0 )',\n            'uniform float time;',\n            'uniform float offsetX;',\n            'uniform float offsetY;',\n            'uniform float offsetZ;',\n            'uniform float scale;',\n            'uniform vec3 translate;',\n            'vec3 mod289(vec3 x) {',\n            '    return x - floor(x * (1.0 / 289.0)) * 289.0;',\n            '}',\n            'vec4 mod289(vec4 x) {',\n            '    return x - floor(x * (1.0 / 289.0)) * 289.0;',\n            '}',\n            'vec4 permute(vec4 x) {',\n            '    return mod289(((x*34.0)+1.0)*x);',\n            '}',\n            'vec4 taylorInvSqrt(vec4 r)',\n            '{',\n            '    return 1.79284291400159 - 0.85373472095314 * r;',\n            '}',\n            'float snoise(vec3 v)',\n            '{',\n            '    const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;',\n            '    const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);',\n            '    // First corner',\n            '    vec3 i  = floor(v + dot(v, C.yyy) );',\n            '    vec3 x0 =   v - i + dot(i, C.xxx) ;',\n            '    // Other corners',\n            '    vec3 g = step(x0.yzx, x0.xyz);',\n            '    vec3 l = 1.0 - g;',\n            '    vec3 i1 = min( g.xyz, l.zxy );',\n            '    vec3 i2 = max( g.xyz, l.zxy );',\n            '    vec3 x1 = x0 - i1 + C.xxx;',\n            '    vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y',\n            '    vec3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y',\n            '    // Permutations',\n            '    i = mod289(i);',\n            '    vec4 p = permute( permute( permute(',\n            '                        i.z + vec4(0.0, i1.z, i2.z, 1.0 ))',\n            '                + i.y + vec4(0.0, i1.y, i2.y, 1.0 ))',\n            '        + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));',\n            '    // Gradients: 7x7 points over a square, mapped onto an octahedron.',\n            '    // The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)',\n            '    float n_ = 0.142857142857; // 1.0/7.0',\n            '    vec3  ns = n_ * D.wyz - D.xzx;',\n            '    vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)',\n            '    vec4 x_ = floor(j * ns.z);',\n            '    vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)',\n            '    vec4 x = x_ *ns.x + ns.yyyy;',\n            '    vec4 y = y_ *ns.x + ns.yyyy;',\n            '    vec4 h = 1.0 - abs(x) - abs(y);',\n            '    vec4 b0 = vec4( x.xy, y.xy );',\n            '    vec4 b1 = vec4( x.zw, y.zw );',\n            '    vec4 s0 = floor(b0)*2.0 + 1.0;',\n            '    vec4 s1 = floor(b1)*2.0 + 1.0;',\n            '    vec4 sh = -step(h, vec4(0.0));',\n            '    vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;',\n            '    vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;',\n            '    vec3 p0 = vec3(a0.xy,h.x);',\n            '    vec3 p1 = vec3(a0.zw,h.y);',\n            '    vec3 p2 = vec3(a1.xy,h.z);',\n            '    vec3 p3 = vec3(a1.zw,h.w);',\n            '    //Normalise gradients',\n            '    vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));',\n            '    p0 *= norm.x;',\n            '    p1 *= norm.y;',\n            '    p2 *= norm.z;',\n            '    p3 *= norm.w;',\n            '    // Mix final noise value',\n            '    vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);',\n            '    m = m * m;',\n            '    return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1),',\n            '                    dot(p2,x2), dot(p3,x3) ) );',\n            '}',\n            '// ************* noise ************* //',\n            'void main()\t{',\n            '    // 正規化',\n            '    vec2 uv = gl_FragCoord.xy / resolution.xy;',\n            '    float t = time;',\n            '    // 位置情報の取り出し',\n            '    vec4 tmpPos = texture2D( texturePosition, uv );',\n            '    vec3 pos = tmpPos.xyz;',\n            '    // ベクトルの取り出し',\n            '    vec4 tmpVel = texture2D( textureVelocity, uv );',\n            '    vec3 vel = tmpVel.xyz;',\n            '    // 最初の位置',\n            '    vec4 offsetV = texture2D( offsetValue, uv);',\n            '    vec3 offset = offsetV.xyz;',\n            '    float speed = 0.05;',\n            '    float  scalex = time  * speed + 0.1365143;',\n            '    float  scaley = time  * speed +   1.21688;',\n            '    float  scalez = time  * speed +    1.5564;',\n            '    float _scale = snoise(pos)*0.1;',\n            '    //float _scale = 0.04;',\n            '    vec3 dist = pos;',\n            '    //vec3 n = normalize(translate)*-1.0+normalize(dist);',\n            '    vec3 n = normalize(dist);',\n            '    vel.x=snoise(vec3(pos.x*scale, pos.y*scale,time));',\n            '    vel.y=snoise(vec3(pos.y*scale, pos.x*scale,time));',\n            '    vel.z=snoise(vec3(pos.z*scale, pos.y*scale,time));',\n            '    vel += n*1.0;',\n            '    //vel.z * = 1.0;',\n            '    // ノイズの値を位置情報から生成',\n            '    gl_FragColor = vec4( vec3(vel.x,vel.y,vel.z), 1.0 );',\n            '}',\n\n\n        ].join('\\n')\n};\n\nvar particleShader =\n{\n    vertexShader :\n        [\n            '// For PI declaration:',\n            '#include <common>',\n            'uniform sampler2D texturePosition;',\n            'uniform sampler2D textureVelocity;',\n            'uniform float cameraConstant;',\n            'uniform float density;',\n            'varying vec2 vUv;',\n            'uniform float radius;',\n            'void main() {',\n            '    // 位置情報の取り出し',\n            '    vec4 posTemp = texture2D( texturePosition, uv );',\n            '    vec3 pos = posTemp.xyz;',\n            '    vec4 mvPosition = modelViewMatrix * vec4( pos, 1.0 );',\n            '    gl_PointSize = 0.5 * cameraConstant / ( - mvPosition.z );',\n            '    vUv = uv;',\n            '    gl_Position = projectionMatrix * mvPosition;',\n            '}',\n\n        ].join('\\n'),\n    fragmentShader :\n        [\n            'varying vec4 vColor;',\n            'uniform sampler2D map;',\n            'varying vec2 vUv;',\n            'uniform float alpha;',\n            'uniform vec3 color;',\n            'vec3 HUEtoRGB(float H){',\n            '    H = mod(H,1.0);',\n            '    float R = abs(H * 6.0 - 3.0) - 1.0;',\n            '    float G = 2.0 - abs(H * 6.0 - 2.0);',\n            '    float B = 2.0 - abs(H * 6.0 - 4.0);',\n            '    return clamp(vec3(R,G,B),0.0,1.0);',\n            '}',\n            'vec3 HSLtoRGB(vec3 HSL){',\n            '    vec3 RGB = HUEtoRGB(HSL.x);',\n            '    float C = (1.0 - abs(2.0 * HSL.z - 1.0)) * HSL.y;',\n            '    return (RGB - 0.5) * C + HSL.z;',\n            '}',\n            'void main() {',\n            '    float size = 0.5;',\n            '    vec4 diffuseColor = texture2D( map, vUv );',\n            '    float f = length( gl_PointCoord - vec2( size, size ) );',\n            '    if ( f > size ) {',\n            '        discard;',\n            '    }',\n            '    gl_FragColor =vec4(color.xyz,1.0);',\n            '}',\n\n        ].join('\\n')\n};\n\n\nclass GPGPUParticle {\n\n    private WIDTH:number;\n    private geometry:any;\n    private PARTICLES:number;\n\n\n\n    private gpuCompute:any;\n    private velocityVariable:any;\n    private positionVariable:any;\n    private offsetVariable:any;\n    private velocityUniforms:any;\n    private positionUniforms:any;\n    private offsetUniforms:any;\n    private particleUniforms:any;\n\n    private scene:THREE.Scene;\n    private camera:THREE.Camera;\n    private renderer:THREE.WebGLRenderer;\n    public position:any;\n    private boxWidth:number;\n    public startUpdate:boolean;\n    private particle:any;\n    public rotation:any;\n\n    private boxMaterial:THREE.Material;\n    private boxGeomery:THREE.Geometry;\n    private boxMesh:THREE.Mesh;\n    private color:THREE.Color;\n    private boxRemove:boolean;\n    private startPosition:THREE.WebGLTexture;\n    private simplex:Object;\n\n    private group:THREE.Group;\n\n\n    constructor(scene:THREE.Scene, camera:THREE.Camera, renderer:THREE.WebGLRenderer,width:number,position:THREE.Vector3,color:THREE.Color)\n    {\n\n        this.simplex = new SimplexNoise();\n\n        this.WIDTH = width;\n        this.PARTICLES =  500 * 500;\n\n        this.scene = scene;\n        this.camera = camera;\n        this.renderer = renderer;\n        this.color = color;\n\n        this.boxWidth = width;\n        this.group = new THREE.Group();\n        this.group.position.set(position.x,position.y,position.z);\n        this.position = this.group.position;\n        this.rotation = this.group.rotation;\n        this.initComputeRenderer();\n        this.initPosition();\n\n        // this.createBox();\n\n        this.boxRemove = false;\n\n\n        this.updateGpuCompute();\n    }\n\n\n\n    public setRotateXYZ(x,y,z)\n    {\n        this.group.rotateX(x);\n        this.group.rotateX(y);\n        this.group.rotateX(z);\n    }\n\n\n    private initComputeRenderer()\n    {\n        // 画面サイズだけGPU Rendererを生成\n        this.gpuCompute = new GPUComputationRenderer( this.WIDTH, this.WIDTH, this.renderer );\n        // 位置情報用のテクスチャ\n        var dtPosition = this.gpuCompute.createTexture();\n        // パーティクルごとの移動方向を保存するテクスチャ\n        var dtVelocity = this.gpuCompute.createTexture();\n        // noiseに使うoffset\n        var dtOffset = this.gpuCompute.createTexture();\n\n        // おまじない\n        this.fillTextures(dtPosition, dtVelocity,dtOffset);\n        this.startPosition = dtPosition;\n\n        // shader Programの登録\n\n        this.velocityVariable = this.gpuCompute.addVariable( \"textureVelocity\",computeShaderVelocity.shader, dtVelocity );\n        this.positionVariable = this.gpuCompute.addVariable( \"texturePosition\", computeShaderPosition.shader, dtPosition );\n        this.offsetVariable = this.gpuCompute.addVariable( \"offsetValue\", offsetValueShader.shader, dtOffset );\n\n\n        this.gpuCompute.setVariableDependencies( this.velocityVariable, [ this.positionVariable, this.velocityVariable, this.offsetVariable ] );\n        this.gpuCompute.setVariableDependencies( this.positionVariable, [ this.positionVariable, this.velocityVariable, this.offsetVariable ] );\n        this.gpuCompute.setVariableDependencies( this.offsetVariable,   [ this.positionVariable, this.velocityVariable, this.offsetVariable ] );\n\n\n        // uniform変数の登録？\n        this.velocityUniforms = this.velocityVariable.material.uniforms;\n        this.offsetUniforms   = this.offsetVariable.material.uniforms;\n        this.positionUniforms = this.positionVariable.material.uniforms;\n        this.velocityUniforms.time = { value: 1.0 };\n        this.velocityUniforms.offsetX = { value: Math.random() };\n        this.velocityUniforms.offsetY = { value: Math.random() };\n        this.velocityUniforms.offsetZ = { value: Math.random() };\n        this.positionUniforms.speed = { value: 1.0 };\n        this.positionUniforms.init = { value: 0.0 };\n        // this.velocityUniforms.velocity = { value: this.position };\n        this.positionUniforms.alpha = { value: 1.0 };\n        var seed = 0.1;\n        this.velocityUniforms.offseX = {value: Math.random()*seed};\n        this.velocityUniforms.offseY = {value: Math.random()*seed};\n        this.velocityUniforms.offseZ = {value: Math.random()*seed};\n        this.velocityUniforms.scale = {value: (0.01+Math.random()*0.01-0.005)};\n        this.velocityUniforms.translate = {value: this.position};\n\n        var error = this.gpuCompute.init();\n        if ( error !== null ) {\n            console.error( error );\n        }\n\n    }\n    private initPosition()\n    {\n        // particleの初期位置を決める\n        this.geometry = new THREE.BufferGeometry();\n        var positions = new Float32Array( this.PARTICLES * 3 );\n        var p = 0;\n\n        let posArray = this.startPosition.image.data;\n        // 一旦0でうめる。texturePositionの値を参照するためとりあえず埋めれば良い。\n        for ( var i = 0; i < this.PARTICLES; i++ ) {\n            // x\n            p++;\n            positions[ p ] = posArray[p];\n            // y\n            p++;\n            positions[ p ] = posArray[p];\n            // z\n            p++;\n            positions[ p ] = posArray[p];\n        }\n\n        // テクスチャーに保存した情報を取り出すためにvec2(x,y)座標を記録\n        var uvs = new Float32Array( this.PARTICLES * 2 );\n        p = 0;\n        for ( var j = 0; j < this.WIDTH; j++ ) {\n            for ( var i = 0; i < this.WIDTH; i++ ) {\n                uvs[ p++ ] = i / ( this.WIDTH - 1 );\n                uvs[ p++ ] = j / ( this.WIDTH - 1 );\n            }\n        }\n\n\n        // vertex-shaderに登録\n        this.geometry.addAttribute( 'position', new THREE.BufferAttribute( positions, 3 ) );\n        this.geometry.addAttribute( 'uv', new THREE.BufferAttribute( uvs, 2 ) );\n\n\n\n        var colorVec =  new THREE.Vector3(this.color.r,this.color.g,this.color.b);\n        // particleの位置と移動方向を収めるuinform変数の初期化\n        this.particleUniforms = {\n            map: { value: new THREE.TextureLoader().load( \"./textures/circle.png\" ) },\n            texturePosition: { value: null },\n            textureVelocity: { value: null },\n            alpha:{value:1.0},\n            color: {value: colorVec},\n            cameraConstant: { value: this.getCameraConstant(this.camera) }\n        };\n\n        // ShaderMaterial の設定\n        var material = new THREE.ShaderMaterial( {\n            uniforms:       this.particleUniforms,\n            vertexShader:   particleShader.vertexShader,\n            fragmentShader: particleShader.fragmentShader,\n            transparent: true\n        });\n        // おまじない\n        material.extensions.drawBuffers = true;\n        // Points オブジェクトを生成\n        this.particle = new THREE.Points( this.geometry, material );\n        this.particle.matrixAutoUpdate = false;\n        this.particle.updateMatrix();\n        this.particle.frustumCulled = false;\n        // シーンに追加\n        // particles.position.set(50,5,0);\n        this.group.add(this.particle);\n        // group.translateX(this.position.x);\n        // group.translateY(this.position.y);\n        // group.translateZ(this.position.z);\n        // this.group.position.set(this.position.x,this.position.y,this.position.z);\n        //particles.position.set(this.position.x,this.position.y,this.position.z);\n        this.scene.add( this.group );\n\n    }\n\n\n    private fillTextures(texturePosition, textureVelocity,offsetValue)\n    {\n        // 場所と移動方向を保存するテクスチャーの初期化\n        var posArray = texturePosition.image.data;\n        var velArray = textureVelocity.image.data;\n        var offsetArray = offsetValue.image.data;\n\n        let couter = 0;\n        for ( var k = 0, kl = posArray.length; k < kl; k += 4 ) {\n            // Position\n            var x, y, z;\n            var width = this.boxWidth;\n\n\n            x = Math.random()*width-width/2;\n            z = Math.random()*width-width/2;\n            y = Math.random()*width-width/2;\n            // Fill in texture values\n            couter += 0.01;\n            var value = this.simplex.noise3D(x*0.5,y*0.5,couter);\n\n            posArray[ k + 0 ] = x;\n            posArray[ k + 1 ] = value;\n            posArray[ k + 2 ] = z;\n            posArray[ k + 3 ] = 1.0;\n            velArray[ k + 0 ] = Math.random()*0.2-0.1;\n            velArray[ k + 1 ] = Math.random()*0.2-0.1;\n            velArray[ k + 2 ] = Math.random()*0.2-0.1;\n            velArray[ k + 3 ] = Math.random()*0.2-0.1;\n\n            offsetArray[ k + 0 ] = x;\n            offsetArray[ k + 1 ] = y;\n            offsetArray[ k + 2 ] = z;\n            offsetArray[ k + 3 ] = 0;\n        }\n\n    }\n\n    public getCameraConstant(camera) {\n        // カメラ情報を計算。\n        return window.innerHeight / ( Math.tan( THREE.Math.DEG2RAD * 0.5 * camera.fov ) / camera.zoom );\n    }\n\n    public resize() {\n\n        this.particleUniforms.cameraConstant.value = this.getCameraConstant(this.camera);\n    }\n\n    public setPosition(pos)\n    {\n        this.group.position.set(pos.x,pos.y,pos.z)\n\n    }\n\n    public init()\n    {\n        this.positionUniforms.init.value = 1.0;\n    }\n\n    public updateGpuCompute()\n    {\n        // gpuComputeをアップデート\n        this.gpuCompute.compute();\n        // 前のフレームの情報でパーティクルの位置情報を上書き\n        this.particleUniforms.texturePosition.value = this.gpuCompute.getCurrentRenderTarget(this.positionVariable).texture;\n        // 前のフレームの情報でパーティクルの移動方向情報を上書き\n        this.particleUniforms.textureVelocity.value = this.gpuCompute.getCurrentRenderTarget(this.velocityVariable).texture;\n        // this.particleUniforms.alpha.value -= 0.001;\n        this.velocityUniforms.translate.value = this.position;\n    }\n\n\n    public update()\n    {\n        this.renderer.setClearColor ( 0x000000, 1.0 );\n\n\n\n        // this.resize();\n        if(this.startUpdate)\n        {\n\n            this.updateGpuCompute();\n\n        }\n\n\n\n\n    }\n\n}\n\n// ************************ scene ************************ //\nclass GPGPUParticleScene {\n\n    public scene: THREE.Scene;\n    public camera: THREE.Camera;\n\n    private controls:any;\n\n\n    public UPDATE:boolean = true;\n    public END:boolean = false;\n    public renderer:any;\n    private gpuparticle:GPGPUParticle;\n    private startUpdate:boolean;\n\n    private material:any;\n    private clickCounter:number = 0;\n    private isUpdate:boolean = false;\n    private animateSetting:Object;\n    private speed:number = 1.0;\n\n\n\n\n    constructor(renderer) {\n\n\n\n        this.renderer = renderer\n        this.camera = new THREE.PerspectiveCamera( 110, window.innerWidth / window.innerHeight, 1,50000 );\n        this.camera.position.y = 0;\n        this.camera.position.z = 300;\n        this.scene = new THREE.Scene();\n\n\n            let vec = 1;\n\n            var setting =\n            {\n                direction:vec*-1,\n                moveToX:vec*2,\n                y:Math.random()-0.5,\n                z:Math.random()-0.5,\n                rotateX:Math.random()-0.5,\n                rotateY:Math.random()-0.5,\n                rotateZ:Math.random()-0.5\n            };\n            this.animateSetting = setting;\n\n            var position = new THREE.Vector3(vec*(200+Math.random()*100),Math.random()*200-100,Math.random()*200-100);\n            this.startUpdate = false;\n            var color = new THREE.Color(0xffffff);\n            // scene, camera, renderer,width,position,color\n            this.gpuparticle = new GPGPUParticle(this.scene,this.camera,this.renderer,100,position,color);\n\n\n\n\n        this.scene.add(new THREE.AmbientLight(0xffffff,0.5));\n        var dLight = new THREE.DirectionalLight(0xffffff,0.8);\n        dLight.position.set(0,800,0);\n        this.scene.add(dLight);\n\n        var dLight = new THREE.DirectionalLight(0xffffff,0.8);\n        dLight.position.set(0,0,300);\n        this.scene.add(dLight);\n\n\n\n\n    }\n\n    public keyUp()\n    {\n\n    }\n\n    public keyDown(event)\n    {\n\n    }\n\n\n    public  initOrbitControls()\n    {\n        this.controls = new THREE.OrbitControls(this.camera,this.renderer.domElement);\n        this.controls.enableKeys = false;\n    }\n\n    public resize()\n    {\n            this.gpuparticle.resize();\n\n    }\n\n\n\n\n\n\n    public remove()\n    {\n\n\n        //console.log(this.scene.children);\n        while(this.scene.children.length != 0)\n        {\n            this.scene.remove(this.scene.children[0]);\n            if(this.scene.children[0] == THREE.Mesh){\n                this.scene.children[0].geometry.dispose();\n                this.scene.children[0].material.dispose();\n            }\n\n        };\n\n\n    }\n    public endEnabled()\n    {\n        this.UPDATE = false;\n    }\n\n    public click()\n    {\n        if(this.clickCounter < this.gpuparticle.length)\n        {\n\n            // this.gpuparticle[this.clickCounter].startUpdate = true;\n            // this.clickCounter++;\n        }\n\n        if(this.clickCounter == 0)\n        {\n            this.isUpdate = true;\n        }\n\n        if(this.clickCounter == 1)\n        {\n            this.gpuparticle.startUpdate = true;\n\n        } else {\n\n        }\n\n\n        this.clickCounter++;\n\n\n\n\n    }\n\n    public update() {\n\n\n        this.gpuparticle.update();\n\n\n\n\n    }\n\n\n}\n\n"]}