{"version":3,"file":"matrix_test.js","sourceRoot":"","sources":["matrix_test.ts"],"names":[],"mappings":"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","sourcesContent":["/// <reference path=\"typings/index.d.ts\" />\n\nimport PlaneBufferGeometry = THREE.PlaneBufferGeometry;\nclass MatrxTest{\n\n    public scene: THREE.Scene;\n    public camera: THREE.Camera;\n    private timer:number = 0;\n    private renderer:THREE.WebGLRenderer;\n\n\n    constructor(renderer:THREE.WebGLRenderer) {\n\n        this.renderer = renderer;\n        this.createScene();\n\n\n    }\n\n    createLight( color:any ) {\n        var pointLight = new THREE.PointLight( color, 1, 60 );\n        pointLight.castShadow = true;\n        pointLight.shadow.camera.near = 1;\n        pointLight.shadow.camera.far = 40;\n        // pointLight.shadowCameraVisible = true;\n        pointLight.shadow.bias = 0.001;\n        var geometry = new THREE.SphereGeometry( 0.3, 12, 6 );\n        var material = new THREE.MeshBasicMaterial( { color: color } );\n        var sphere = new THREE.Mesh( geometry, material );\n        // pointLight.add( sphere );\n        return pointLight\n    }\n\n\n\n\n    // シーンを作る。ここでオブジェクトを格納していく。\n    private createScene(){\n        // this.time = 0.0;\n        // this.noise = new SimplexNoise();\n\n\n        // シーンを作る\n        this.scene = new THREE.Scene();\n        this.scene.fog = new THREE.FogExp2( 0xffffff, 0.001 );\n        this.renderer.setClearColor({color:0xffffff});\n\n        // カメラを作成\n        this.camera = new THREE.PerspectiveCamera( 75, window.innerWidth/window.innerHeight, 0.1, 10000 );\n        this.camera.position.z = 1;\n        // this.camera.position.y = 20;\n\n\n\n\n\n        // **************** Objects setup ***************** //\n\n        let pointMatrixGeometry = new THREE.BufferGeometry();\n        let _width = 6;\n        let _height =6;\n        let _depth = 6;\n        let particles = _width*_height*_depth;\n\n\n        let planeGeo = new PlaneBufferGeometry(1500,1500,8,8);\n\n        var quat = new THREE.Quaternion();\n\n        // ベクトル(1,1,1) を回転軸とする (※正規化も実施)\n        var axis = new THREE.Vector3(1,0,0).normalize();\n\n        // 回転角は90°とする\n        var angle = Math.PI / 2;\n\n        // 回転軸axis と角度angle からクォータニオンを計算\n        quat.setFromAxisAngle(axis,angle);\n\n        let pos = planeGeo.getAttribute(\"position\");\n        let originalPos = pos.array;\n        console.log(pos);\n\n        let depthCounter = 10;\n\n        let positions = new Float32Array( originalPos.length * depthCounter );\n        let colors = new Float32Array( particles * 3 );\n\n        // let xStep = 10;\n        // let zStep = 2;\n        // let yStep = 20;\n        // let zCounter = 0;\n        // let xCounter = 0;\n        // let yCounter = 0;\n        // let color = new THREE.Color();\n        // let n = 1000, n2 = n / 2;\n        let counter = 0;\n        for ( var i = 1; i <= depthCounter; i++ ) {\n            for(let j = 0; j < originalPos.length; j+=3)\n            {\n                positions[counter++] =   originalPos[j];\n                positions[counter++] = originalPos[j+1];\n                positions[counter++] = originalPos[j+2] + i * -120;\n\n            }\n        }\n\n        // pointMatrixGeometry.addAttribute(\"position\", pos );\n        pointMatrixGeometry.addAttribute(\"position\", new THREE.BufferAttribute( positions,3 ) );\n        pointMatrixGeometry.computeBoundingBox();\n\n        var textureLoader = new THREE.TextureLoader();\n        var mapCircle = textureLoader.load( 'texture/circle.png' );\n\n        var material = new THREE.PointsMaterial( {\n            size: 5,\n            transparent:true,\n            color: 0x000000,\n            map : mapCircle\n        } );\n        let points = new THREE.Points( pointMatrixGeometry, material );\n        this.scene.add( points );\n\n\n        let controls = new THREE.OrbitControls( this.camera, this.renderer.domElement );\n    }\n\n\n    public getSpherePosition(radius:number)\n    {\n\n        //(r sinsθ cosΦ, r cosθ, r sinθ sinΦ)\n\n        let theta = Math.random()*Math.PI*2;\n        let phi = Math.random()*Math.PI*2;\n        let x = radius * Math.sin(theta)*Math.cos(phi);\n        let y = radius * Math.cos(theta);\n        let z = radius * Math.sin(theta)*Math.sin(phi);\n\n        return new THREE.Vector3(x,y,z);\n    }\n\n    private snoiseVec3( x:THREE.Vector3 ){\n\n        let s  = this.noise.noise3D( x.x,x.y,x.z );\n        let s1 = this.noise.noise3D( x.y - 19.1 , x.z + 33.4 , x.x + 47.2 );\n        let s2 = this.noise.noise3D( x.z + 74.2 , x.x - 124.5 , x.y + 99.4 );\n        let c = new THREE.Vector3( s , s1 , s2 );\n        return c;\n\n    }\n\n    private curlNoise( p:THREE.Vector3 ,time)\n    {\n\n        let e = 0.1;\n        let dx = new THREE.Vector3( e   , 0.0 , 0.0 );\n        let dy = new THREE.Vector3( 0.0 , e   , 0.0 );\n        let dz = new THREE.Vector3( 0.0 , 0.0 , e   );\n\n\n        var _p  = new THREE.Vector3(p.x,p.y,p.z).sub(dx);\n        let p_x0 = this.snoiseVec3( _p);\n\n        _p  = new THREE.Vector3(p.x,p.y,p.z).add(dx);\n        let p_x1 = this.snoiseVec3( _p );\n\n        _p = new THREE.Vector3(p.x,p.y,p.z).sub(dy);\n        let p_y0 = this.snoiseVec3( _p );\n\n        _p = new THREE.Vector3(p.x,p.y,p.z).add(dy);\n        let p_y1 = this.snoiseVec3( _p );\n\n        _p = new THREE.Vector3(p.x,p.y,p.z).sub(dz);\n        let p_z0 = this.snoiseVec3( _p );\n\n        _p = new THREE.Vector3(p.x,p.y,p.z).add(dz);\n        let p_z1 = this.snoiseVec3( _p );\n\n        let x = p_y1.z - p_y0.z - p_z1.y + p_z0.y;\n        let y = p_z1.x - p_z0.x - p_x1.z + p_x0.z;\n        let z = p_x1.y - p_x0.y - p_y1.x + p_y0.x;\n\n        //console.log(p_z0);\n        let divisor = 1.0 / ( 2.0 * e );\n        let noisevec = new THREE.Vector3( x , y , z );\n        noisevec.multiplyScalar(divisor);\n        return noisevec;\n\n    }\n\n    public keyDown(keycode)\n    {\n        // if(keycode.key == \"s\")\n        // {\n        //     console.log(\"stop\");\n        // }\n\n    }\n\n    public keyUp(e:KeyboardEvent)\n    {\n\n    }\n\n    // ワンフレームごとの処理\n    public update() {\n\n         this.renderer.setClearColor(0xffffff);\n\n    }\n\n\n\n\n\n}\n\n\n"]}