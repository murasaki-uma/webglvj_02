{"version":3,"file":"NoiseLine.js","sourceRoot":"","sources":["NoiseLine.ts"],"names":[],"mappings":"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","sourcesContent":["/// <reference path=\"typings/index.d.ts\" />\n\nclass NoiseLine{\n\n    public scene: THREE.Scene;\n    public camera: THREE.Camera;\n    private timer:number = 0;\n    private renderer:THREE.WebGLRenderer;\n    private noise:Object;\n    private time:number;\n\n    private lineGeo:THREE.BufferGeometry;\n\n    private positions:Float32Array;\n    private indices_array:number[] = [];\n    private colors:Float32Array;\n\n    constructor(renderer:THREE.WebGLRenderer) {\n\n        // renderer.setClearColor(0xffffff);\n        this.renderer = renderer;\n        this.createScene();\n    }\n\n    // シーンを作る。ここでオブジェクトを格納していく。\n    private createScene(){\n\n        this.time = 0.0;\n        this.noise = new SimplexNoise();\n\n        // シーンを作る\n        this.scene = new THREE.Scene();\n        // this.scene.fog = new THREE.FogExp2( 0xf98989, 0.002 );\n        // this.renderer.setClearColor(this.scene.fog.color);s\n\n        // カメラを作成\n        this.camera = new THREE.PerspectiveCamera( 75, window.innerWidth/window.innerHeight, 0.1, 10000 );\n        this.camera.position.z = 100;\n        this.camera.position.y = 20;\n\n        this.renderer.setClearColor(new THREE.Color(0x000000));\n        // this.renderer.setSize(window.innerWidth, window.innerHeight);\n        // this.renderer.shadowMap.enabled = true;\n\n        let light = new THREE.DirectionalLight( 0xffffff );\n        light.position.set( 1, 1, 1 );\n        this.scene.add( light );\n        let light = new THREE.DirectionalLight( 0xffffff );\n        light.position.set( -1, -1, -1 );\n        this.scene.add( light );\n        //\n        // let light = new THREE.SpotLight( 0xf8ffc0,1.0 );\n        // light.position.set( 0, 100, 0 );\n        // this.scene.add( light );\n        //\n        // let light = new THREE.SpotLight( 0xffffff,1.0 );\n        // light.position.set( 0, 90, 0 );\n        // this.scene.add( light );\n        //\n        //\n        // light = new THREE.DirectionalLight( 0xffffff );\n        // light.position.set( -1, -1, -1 );\n        // this.scene.add( light );\n\n        let amblight = new THREE.AmbientLight( 0xffffff );\n        this.scene.add( amblight );\n\n\n\n        //\n        // for (let i = 0; i < 100; i{{}}) {\n        //     if (next_positions_index == 0xffff) throw new Error(\"Too many points\");\n        //\n        //     return next_positions_index++;\n        // }\n\n\n        this.lineGeo = new THREE.BufferGeometry();\n\n\n\n\n\n\n        let yStep = 11;\n        let lineSize = 10;\n        for(let y = 0; y < lineSize; y++)\n        {\n\n            // let _y = yStep *  y - (yStep/2) * lineSize;\n            let _y = 50 * Math.cos(Math.PI*2/lineSize*y - Math.PI);\n\n            let geometry = new THREE.BufferGeometry();\n            let size = 300;\n\n            let material = new THREE.LineBasicMaterial({ vertexColors: THREE.VertexColors,\n                linewidth:2});\n            this.positions = new Float32Array( size * 3 );\n            this.colors = new Float32Array( size * 3 );\n\n            let r = 50*Math.sin(Math.PI/(lineSize-1) * y);\n\n            let count = 0;\n            let timer = 0.0;\n            let radiusRange = r/15;\n\n            for ( var i = 0; i < size; i ++ ) {\n\n                timer += 0.01 + _y*0.01;\n\n                let noiseScale = 0.05;\n                if(i != 0){\n                    r = 50*Math.sin(Math.PI/(lineSize-1) * y) + radiusRange* this.noise.noise3D\n                        (\n                            this.positions[ (i-1) * 3 ]*noiseScale,\n                            timer,\n                            this.positions[ (i-1) * 3 ]*noiseScale\n                        );\n                } else {\n                    r = 50*Math.sin(Math.PI/(lineSize-1) * y) + radiusRange* this.noise.noise3D\n                        (\n                            0,\n                            timer,\n                            0\n                        );\n\n                }\n\n\n                let offsetRad = Math.PI*2 /(size-1)*i;\n                var x = Math.cos(offsetRad) * r;\n                var height = _y;//Math.random() * r - r / 2;\n                var z = Math.sin(offsetRad) * r;//Math.random() * r - r / 2;\n\n\n                // positions\n                this.positions[ count * 3 ] = x;\n                this.positions[ count * 3 + 1 ] = height;\n                this.positions[ count * 3 + 2 ] = z;\n                // colors\n                this.colors[ count * 3 ] = 1.0;\n                this.colors[ count * 3 + 1 ] = 1.0;\n                this.colors[ count * 3 + 2 ] = 1.0;\n\n                count++;\n            }\n\n\n\n\n            // positions\n            this.positions[ count * 3 ] = this.positions[0] ;\n            this.positions[ count * 3 + 1 ] = this.positions[1] ;\n            this.positions[ count * 3 + 2 ] = this.positions[2] ;\n            // colors\n            this.colors[ count * 3 ] = 1.0;\n            this.colors[ count * 3 + 1 ] = 1.0;\n            this.colors[ count * 3 + 2 ] = 1.0;\n\n\n\n            // this.lineGeo.setIndex( new THREE.BufferAttribute( new Uint16Array( this.indices_array ), 1 ) );\n            geometry.addAttribute( 'position', new THREE.BufferAttribute( this.positions , 3 ) );\n            geometry.addAttribute( 'color', new THREE.BufferAttribute( this.colors , 3 ) );\n            geometry.computeBoundingSphere();\n\n            let mesh = new THREE.Line(geometry, material);\n            this.scene.add(mesh);\n\n        }\n\n\n        //\n        // this.tubeGeometry = new THREE.TubeGeometry(new THREE.CatmullRomCurve3(points),10,3,10,false);\n        // // this.scene.add(tubeGeometry);\n        // let meshMaterial = new THREE.MeshNormalMaterial({\n        //     transparent: true,\n        //     opacity: 0.7\n        // });\n        //\n        // //  meshMaterial.side = THREE.DoubleSide;\n        // let wireFrameMat = new THREE.MeshBasicMaterial();\n        // wireFrameMat.wireframe = true;\n        //\n        // // create a multimaterial\n        // let mesh = THREE.SceneUtils.createMultiMaterialObject(this.tubeGeometry, [meshMaterial]);\n        // this.scene.add(mesh);\n        //\n        //\n        // console.log(this.tubeGeometry);\n        //\n        let controls = new THREE.OrbitControls( this.camera, this.renderer.domElement );\n    //\n\n\n\n    }\n\n\n    // ワンフレームごとの処理\n    public update() {\n\n        // for(var i = 0; i < this.rotations.length; i++)\n        // {\n        //     this.rotations[i].x += 0.001;\n        //     this.rotations[i].y += 0.001;\n        //     this.rotations[i].z += 0.001;\n        //\n        //     this.objs[i].rotation.set(this.rotations[i].x,this.rotations[i].y,this.rotations[i].z);\n        //\n        //     this.tetValues[i].radian += 0.001;\n        //     let radisu  =Math.sin(this.timer*100)*100 + this.tetValues[i].radius;\n        //\n        //     let x = Math.cos(this.tetValues[i].radian)*radisu;\n        //     let z = Math.sin(this.tetValues[i].radian)*radisu;\n        //     // let y = Math.sin(Math.random()*Math.PI*2) * 10;\n        //\n        //     this.objs[i].position.x = x;\n        //     this.objs[i].position.z = z;\n        //\n        //\n        //\n        //     var noise = this.noise.noise3D(this.objs[i].position.x*0.01,this.objs[i].position.y*0.01,this.time*0.01+this.objs[i].position.z*0.01);\n        //\n        //     this.objs[i].position.y = noise*20;\n        //\n        //\n        // }\n\n\n\n\n        this.time += 0.003;\n\n        // for(var i = 0; i < this.planeGeo.vertices.length;i++)\n        // {\n        //     let vert = this.planeGeo.vertices[i];\n        //     var value = this.noise.noise3D(vert.x*0.5,vert.y*0.5,this.time);\n        //     this.planeGeo.vertices[i].z = value*30.0;\n        // }\n        // this.planeGeo.verticesNeedUpdate = true;\n    }\n\n\n}\n\n\n"]}