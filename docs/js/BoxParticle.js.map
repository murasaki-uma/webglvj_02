{"version":3,"file":"BoxParticle.js","sourceRoot":"","sources":["BoxParticle.ts"],"names":[],"mappings":"AAEA;IAuBI,qBAAY,QAA4B;QAlBhC,SAAI,GAAU,GAAG,CAAC;QAKlB,UAAK,GAAU,GAAG,CAAC;QACnB,cAAS,GAAU,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;QAc/C,IAAI,CAAC,IAAI,GAAG,GAAG,CAAC;QAEhB,IAAI,CAAC,OAAO,GAAG,IAAI,YAAY,EAAE,CAAC;QAClC,IAAI,CAAC,KAAK,GAAG,IAAI,KAAK,CAAC,KAAK,EAAE,CAAC;QAC/B,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACzB,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAE,QAAQ,CAAE,CAAC;QACxC,IAAI,CAAC,MAAM,GAAG,IAAI,KAAK,CAAC,iBAAiB,CAAE,EAAE,EAAE,MAAM,CAAC,UAAU,GAAC,MAAM,CAAC,WAAW,EAAE,GAAG,EAAE,KAAK,CAAE,CAAC;QAClG,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,GAAG,IAAI,CAAC;QAC9B,IAAI,CAAC,QAAQ,GAAG,IAAI,KAAK,CAAC,aAAa,CAAE,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAE,CAAC;QAEjF,IAAI,CAAC,YAAY,EAAE,CAAC;QACpB,IAAI,CAAC,mBAAmB,EAAE,CAAC;QAE3B,IAAI,CAAC,WAAW,EAAE,CAAC;IAOvB,CAAC;IAEO,iCAAW,GAAnB;QAEI,IAAI,QAAQ,GAAG,IAAI,KAAK,CAAC,YAAY,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAC;QACrD,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;QAGzB,IAAI,MAAM,GAAG,IAAI,KAAK,CAAC,gBAAgB,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAC;QACvD,MAAM,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,EAAC,GAAG,EAAC,CAAC,CAAC,CAAC;QAC7B,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;QAGvB,IAAI,QAAQ,GAAG,IAAI,KAAK,CAAC,gBAAgB,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAC;QACzD,QAAQ,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,EAAC,CAAC,EAAC,GAAG,CAAC,CAAC;QAC/B,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;QAGzB,IAAI,CAAC,SAAS,EAAE,CAAC;IACrB,CAAC;IAEO,yCAAmB,GAA3B;QAGI,IAAI,CAAC,UAAU,GAAG,IAAI,sBAAsB,CAAE,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,QAAQ,CAAE,CAAC;QAGtF,IAAI,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC,aAAa,EAAE,CAAC;QACjD,IAAI,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC,aAAa,EAAE,CAAC;QAGjD,IAAI,CAAC,YAAY,CAAE,UAAU,EAAE,UAAU,CAAE,CAAC;QAG5C,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,CAAE,iBAAiB,EAAE,QAAQ,CAAC,cAAc,CAAE,uBAAuB,CAAE,CAAC,WAAW,EAAE,UAAU,CAAE,CAAC;QACrJ,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,CAAE,iBAAiB,EAAE,QAAQ,CAAC,cAAc,CAAE,uBAAuB,CAAE,CAAC,WAAW,EAAE,UAAU,CAAE,CAAC;QAGrJ,IAAI,CAAC,UAAU,CAAC,uBAAuB,CAAE,IAAI,CAAC,gBAAgB,EAAE,CAAE,IAAI,CAAC,gBAAgB,EAAE,IAAI,CAAC,gBAAgB,CAAE,CAAE,CAAC;QACnH,IAAI,CAAC,UAAU,CAAC,uBAAuB,CAAE,IAAI,CAAC,gBAAgB,EAAE,CAAE,IAAI,CAAC,gBAAgB,EAAE,IAAI,CAAC,gBAAgB,CAAE,CAAE,CAAC;QAGnH,IAAI,gBAAgB,GAAG,IAAI,CAAC,gBAAgB,CAAC,QAAQ,CAAC,QAAQ,CAAC;QAC/D,IAAI,gBAAgB,GAAG,IAAI,CAAC,gBAAgB,CAAC,QAAQ,CAAC,QAAQ,CAAC;QAE/D,gBAAgB,CAAC,IAAI,GAAG,EAAE,KAAK,EAAE,GAAG,EAAE,CAAC;QACvC,gBAAgB,CAAC,IAAI,GAAG,EAAE,KAAK,EAAE,GAAG,EAAE,CAAC;QAEvC,gBAAgB,CAAC,UAAU,GAAG,EAAE,KAAK,EAAE,IAAI,KAAK,CAAC,OAAO,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,CAAC,EAAE,CAAC;QAClE,gBAAgB,CAAC,cAAc,GAAG,EAAE,KAAK,EAAE,IAAI,KAAK,CAAC,OAAO,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,CAAC,EAAE,CAAC;QAItE,IAAI,KAAK,GAAG,IAAI,CAAC,UAAU,CAAC,IAAI,EAAE,CAAC;QACnC,EAAE,CAAC,CAAE,KAAK,KAAK,IAAK,CAAC,CAAC,CAAC;YACnB,OAAO,CAAC,KAAK,CAAE,KAAK,CAAE,CAAC;QAC3B,CAAC;IACL,CAAC;IAGO,kCAAY,GAApB;QAMI,IAAI,CAAC,QAAQ,GAAG,IAAI,KAAK,CAAC,cAAc,EAAE,CAAC;QAC3C,IAAI,SAAS,GAAG,IAAI,YAAY,CAAE,IAAI,CAAC,SAAS,GAAG,CAAC,CAAE,CAAC;QACvD,IAAI,CAAC,GAAG,CAAC,CAAC;QACV,GAAG,CAAC,CAAE,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,SAAS,EAAE,CAAC,EAAE,EAAG,CAAC;YACxC,SAAS,CAAE,CAAC,EAAE,CAAE,GAAG,CAAC,CAAC;YACrB,SAAS,CAAE,CAAC,EAAE,CAAE,GAAG,CAAC,CAAC;YACrB,SAAS,CAAE,CAAC,EAAE,CAAE,GAAG,CAAC,CAAC;QACzB,CAAC;QAGD,IAAI,GAAG,GAAG,IAAI,YAAY,CAAE,IAAI,CAAC,SAAS,GAAG,CAAC,CAAE,CAAC;QACjD,CAAC,GAAG,CAAC,CAAC;QACN,GAAG,CAAC,CAAE,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,KAAK,EAAE,CAAC,EAAE,EAAG,CAAC;YACpC,GAAG,CAAC,CAAE,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,KAAK,EAAE,CAAC,EAAE,EAAG,CAAC;gBACpC,GAAG,CAAE,CAAC,EAAE,CAAE,GAAG,CAAC,GAAG,CAAE,IAAI,CAAC,KAAK,GAAG,CAAC,CAAE,CAAC;gBACpC,GAAG,CAAE,CAAC,EAAE,CAAE,GAAG,CAAC,GAAG,CAAE,IAAI,CAAC,KAAK,GAAG,CAAC,CAAE,CAAC;YACxC,CAAC;QACL,CAAC;QAGD,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAE,UAAU,EAAE,IAAI,KAAK,CAAC,eAAe,CAAE,SAAS,EAAE,CAAC,CAAE,CAAE,CAAC;QACpF,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAE,IAAI,EAAE,IAAI,KAAK,CAAC,eAAe,CAAE,GAAG,EAAE,CAAC,CAAE,CAAE,CAAC;QAKxE,IAAI,CAAC,gBAAgB,GAAG;YACpB,eAAe,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE;YAChC,eAAe,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE;YAChC,cAAc,EAAE,EAAE,KAAK,EAAE,IAAI,CAAC,iBAAiB,CAAE,IAAI,CAAC,MAAM,CAAE,EAAE;YAChE,GAAG,EAAE,EAAE,KAAK,EAAE,IAAI,KAAK,CAAC,aAAa,EAAE,CAAC,IAAI,CAAE,oBAAoB,CAAE,EAAE;SACzE,CAAC;QAKF,IAAI,QAAQ,GAAG,IAAI,KAAK,CAAC,cAAc,CAAE;YACrC,QAAQ,EAAQ,IAAI,CAAC,gBAAgB;YAGrC,YAAY,EAAI,QAAQ,CAAC,cAAc,CAAE,sBAAsB,CAAE,CAAC,WAAW;YAC7E,cAAc,EAAE,QAAQ,CAAC,cAAc,CAAE,wBAAwB,CAAE,CAAC,WAAW;SAClF,CAAC,CAAC;QACH,QAAQ,CAAC,UAAU,CAAC,WAAW,GAAG,IAAI,CAAC;QACvC,IAAI,SAAS,GAAG,IAAI,KAAK,CAAC,MAAM,CAAE,IAAI,CAAC,QAAQ,EAAE,QAAQ,CAAE,CAAC;QAC5D,SAAS,CAAC,gBAAgB,GAAG,KAAK,CAAC;QACnC,SAAS,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,EAAE,EAAC,EAAE,EAAC,EAAE,CAAC,CAAC;QAClC,SAAS,CAAC,YAAY,EAAE,CAAC;QAGzB,IAAI,CAAC,KAAK,CAAC,GAAG,CAAE,SAAS,CAAE,CAAC;IAChC,CAAC;IAGO,kCAAY,GAApB,UAAsB,eAAe,EAAE,eAAe;QAGlD,IAAI,QAAQ,GAAG,eAAe,CAAC,KAAK,CAAC,IAAI,CAAC;QAC1C,IAAI,QAAQ,GAAG,eAAe,CAAC,KAAK,CAAC,IAAI,CAAC;QAK1C,IAAI,SAAS,GAAG,GAAG,CAAC;QACpB,GAAG,CAAC,CAAE,IAAI,CAAC,GAAG,CAAC,EAAE,EAAE,GAAG,QAAQ,CAAC,MAAM,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,IAAI,CAAC,EAAG,CAAC;YAErD,SAAS,IAAI,IAAI,CAAC;YAClB,IAAI,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;YAKZ,IAAI,GAAG,GAAG,GAAG,CAAC;YACd,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC,GAAG,GAAG,CAAC;YAC9B,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC,GAAG,GAAG,CAAC;YAC9B,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,SAAS,GAAC,GAAG,CAAC,GAAG,GAAG,GAAG,GAAG,CAAC;YAExC,IAAI,KAAK,GAAG,GAAG,CAAC;YAChB,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,GAAC,KAAK,GAAC,KAAK,GAAC,CAAC,CAAC;YAChC,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,GAAC,KAAK,GAAC,KAAK,GAAC,CAAC,CAAC;YAChC,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,GAAC,GAAG,CAAC;YACtB,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,GAAC,KAAK,GAAC,KAAK,GAAC,CAAC,CAAC;YAIhC,QAAQ,CAAE,CAAC,GAAG,CAAC,CAAE,GAAG,CAAC,CAAC;YACtB,QAAQ,CAAE,CAAC,GAAG,CAAC,CAAE,GAAG,CAAC,CAAC;YACtB,QAAQ,CAAE,CAAC,GAAG,CAAC,CAAE,GAAG,CAAC,CAAC;YACtB,QAAQ,CAAE,CAAC,GAAG,CAAC,CAAE,GAAG,IAAI,CAAC,MAAM,EAAE,GAAC,GAAG,CAAC;YAItC,QAAQ,CAAE,CAAC,GAAG,CAAC,CAAE,GAAG,IAAI,CAAC,MAAM,EAAE,GAAC,CAAC,GAAC,CAAC,CAAC;YACtC,QAAQ,CAAE,CAAC,GAAG,CAAC,CAAE,GAAG,IAAI,CAAC,MAAM,EAAE,GAAC,CAAC,GAAC,CAAC,CAAC;YACtC,QAAQ,CAAE,CAAC,GAAG,CAAC,CAAE,GAAG,IAAI,CAAC,MAAM,EAAE,GAAC,CAAC,GAAC,CAAC,CAAC;YACtC,QAAQ,CAAE,CAAC,GAAG,CAAC,CAAE,GAAG,IAAI,CAAC,MAAM,EAAE,GAAC,CAAC,GAAC,CAAC,CAAC;QAC1C,CAAC;IACL,CAAC;IAEM,+BAAS,GAAhB;QAEI,IAAI,UAAU,GAAG,UAAW,GAAG;YAC3B,EAAE,CAAC,CAAE,GAAG,CAAC,gBAAiB,CAAC,CAAC,CAAC;gBACzB,IAAI,eAAe,GAAG,GAAG,CAAC,MAAM,GAAG,GAAG,CAAC,KAAK,GAAG,GAAG,CAAC;gBACnD,OAAO,CAAC,GAAG,CAAE,IAAI,CAAC,KAAK,CAAC,eAAe,EAAE,CAAC,CAAC,GAAG,cAAc,CAAE,CAAC;YACnE,CAAC;QACL,CAAC,CAAC;QAEF,IAAI,UAAU,GAAG,IAAI,KAAK,CAAC,UAAU,CAAE,GAAG,EAAE,EAAE,EAAE,QAAQ,EAAE,QAAQ,CAAE,CAAC;QAGrE,IAAI,CAAC,KAAK,CAAC,GAAG,CAAE,UAAU,CAAE,CAAC;QAK7B,IAAI,OAAO,GAAG,UAAW,GAAG,IAAK,CAAC,CAAC;QACnC,KAAK,CAAC,MAAM,CAAC,QAAQ,CAAC,GAAG,CAAE,SAAS,EAAE,IAAI,KAAK,CAAC,SAAS,EAAE,CAAE,CAAC;QAC9D,IAAI,SAAS,GAAG,IAAI,KAAK,CAAC,SAAS,EAAE,CAAC;QACtC,SAAS,CAAC,OAAO,CAAE,MAAM,CAAE,CAAC;QAC5B,IAAI,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC;QACxB,SAAS,CAAC,IAAI,CAAG,iBAAiB,EAAE,UAAW,SAAS;YACpD,SAAS,CAAC,OAAO,EAAE,CAAC;YACpB,IAAI,SAAS,GAAG,IAAI,KAAK,CAAC,SAAS,EAAE,CAAC;YACtC,SAAS,CAAC,YAAY,CAAE,SAAS,CAAE,CAAC;YACpC,SAAS,CAAC,OAAO,CAAE,MAAM,CAAE,CAAC;YAC5B,SAAS,CAAC,IAAI,CAAE,iBAAiB,EAAE,UAAW,MAAiB;gBAC3D,MAAM,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAE,EAAE,CAAC;gBACzB,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;gBAChC,MAAM,CAAC,QAAQ,CAAC,CAAC,GAAG,EAAE,CAAC;gBACvB,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,OAAO,GAAG,KAAK,CAAC,WAAW,CAAC;gBASxD,MAAM,CAAC,GAAG,CAAE,MAAM,CAAC,CAAC;YACxB,CAAC,EAAE,UAAU,EAAE,OAAO,CAAE,CAAC;QAC7B,CAAC,CAAC,CAAC;IACP,CAAC;IAEM,2BAAK,GAAZ;IAGA,CAAC;IAEM,6BAAO,GAAd,UAAe,OAAO;IAGtB,CAAC;IAGO,uCAAiB,GAAzB,UAA2B,MAAmB;QAC1C,MAAM,CAAC,MAAM,CAAC,WAAW,GAAG,CAAE,IAAI,CAAC,GAAG,CAAE,KAAK,CAAC,IAAI,CAAC,OAAO,GAAG,GAAG,GAAG,MAAM,CAAC,GAAG,CAAE,GAAG,MAAM,CAAC,IAAI,CAAE,CAAC;IACpG,CAAC;IAIM,4BAAM,GAAb;QACI,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC;QAClB,IAAI,CAAC,UAAU,CAAC,OAAO,EAAE,CAAC;QAC1B,IAAI,CAAC,gBAAgB,CAAC,eAAe,CAAC,KAAK,GAAG,IAAI,CAAC,UAAU,CAAC,sBAAsB,CAAE,IAAI,CAAC,gBAAgB,CAAE,CAAC,OAAO,CAAC;QACtH,IAAI,CAAC,gBAAgB,CAAC,eAAe,CAAC,KAAK,GAAG,IAAI,CAAC,UAAU,CAAC,sBAAsB,CAAE,IAAI,CAAC,gBAAgB,CAAE,CAAC,OAAO,CAAC;QACtH,IAAI,CAAC,gBAAgB,CAAC,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC;QAC/D,IAAI,CAAC,gBAAgB,CAAC,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC;QAC/D,IAAI,KAAK,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,gBAAgB,CAAC,QAAQ,CAAC,QAAQ,CAAC,cAAc,CAAC,KAAK,GAAG,IAAI,CAAC,gBAAgB,CAAC,QAAQ,CAAC,QAAQ,CAAC,UAAU,CAAC,KAAK,CAAC;QACxH,IAAI,CAAC,gBAAgB,CAAC,QAAQ,CAAC,QAAQ,CAAC,UAAU,CAAC,KAAK,GAAG,IAAI,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,EAAE,CAAC,CAAC,GAAC,KAAK,EAAC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,EAAE,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC,GAAC,KAAK,EAAC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC,IAAI,CAAC,GAAC,KAAK,CAAC,CAAC;IAEtN,CAAC;IAGL,kBAAC;AAAD,CAAC,AA9RD,IA8RC","sourcesContent":["/// <reference path=\"typings/index.d.ts\" />\n// *********** ひとつめのシーン *********** //\nclass BoxParticle{\n\n    public scene: THREE.Scene;\n    public camera: THREE.Camera;\n    private Box:THREE.Mesh;\n    private time:number = 0.0;\n    private renderer:THREE.WebGLRenderer;\n    private geometry:THREE.BufferGeometry;\n    private controls:any;\n\n    private WIDTH:number = 100;\n    private PARTICLES:number = this.WIDTH * this.WIDTH;\n    private gpuCompute:any;\n    private velocityVariable:any;\n    private positionVariable:any;\n    private positionUniforms:any;\n    private velocityUniforms:any;\n    private particleUniforms:any;\n    private effectController:any;\n\n    private simplex:Object;\n\n\n    constructor(renderer:THREE.WebGLRenderer) {\n\n        this.time = 0.0;\n\n        this.simplex = new SimplexNoise();\n        this.scene = new THREE.Scene();\n        this.renderer = renderer;\n        this.renderer.setClearColor( 0xffffff );\n        this.camera = new THREE.PerspectiveCamera( 75, window.innerWidth/window.innerHeight, 0.1, 10000 );\n        this.camera.position.z = 1000;\n        this.controls = new THREE.OrbitControls( this.camera, this.renderer.domElement );\n\n        this.initPosition();\n        this.initComputeRenderer();\n\n        this.createScene();\n\n\n\n        // ②particle 初期化\n\n\n    }\n\n    private createScene()\n    {\n        let ambLight = new THREE.AmbientLight(0xffffff, 0.5);\n        this.scene.add(ambLight);\n\n\n        let dLight = new THREE.DirectionalLight(0xffffff, 0.8);\n        dLight.position.set(0,100,0);\n        this.scene.add(dLight);\n\n\n        let dLight02 = new THREE.DirectionalLight(0xffffff, 0.4);\n        dLight02.position.set(0,0,100);\n        this.scene.add(dLight02);\n\n\n        this.loadModel();\n    }\n\n    private initComputeRenderer() {\n\n        // gpgpuオブジェクトのインスタンスを格納\n        this.gpuCompute = new GPUComputationRenderer( this.WIDTH, this.WIDTH, this.renderer );\n\n        // 今回はパーティクルの位置情報と、移動方向を保存するテクスチャを2つ用意します\n        var dtPosition = this.gpuCompute.createTexture();\n        var dtVelocity = this.gpuCompute.createTexture();\n\n        // テクスチャにGPUで計算するために初期情報を埋めていく\n        this.fillTextures( dtPosition, dtVelocity );\n\n        // shaderプログラムのアタッチ\n        this.velocityVariable = this.gpuCompute.addVariable( \"textureVelocity\", document.getElementById( 'computeShaderVelocity' ).textContent, dtVelocity );\n        this.positionVariable = this.gpuCompute.addVariable( \"texturePosition\", document.getElementById( 'computeShaderPosition' ).textContent, dtPosition );\n\n        // 一連の関係性を構築するためのおまじない\n        this.gpuCompute.setVariableDependencies( this.velocityVariable, [ this.positionVariable, this.velocityVariable ] );\n        this.gpuCompute.setVariableDependencies( this.positionVariable, [ this.positionVariable, this.velocityVariable ] );\n\n\n        let velocityUniforms = this.velocityVariable.material.uniforms;\n        let positionUniforms = this.positionVariable.material.uniforms;\n\n        velocityUniforms.time = { value: 0.0 };\n        positionUniforms.time = { value: 0.0 };\n\n        positionUniforms.emitterPos = { value: new THREE.Vector3(0,0,0) };\n        positionUniforms.pre_emitterPos = { value: new THREE.Vector3(0,0,0) };\n\n\n        // error処理\n        var error = this.gpuCompute.init();\n        if ( error !== null ) {\n            console.error( error );\n        }\n    }\n\n    // ②パーティクルそのものの情報を決めていく。\n    private initPosition() {\n\n        // 最終的に計算された結果を反映するためのオブジェクト。\n        // 位置情報はShader側(texturePosition, textureVelocity)\n        // で決定されるので、以下のように適当にうめちゃってOK\n\n        this.geometry = new THREE.BufferGeometry();\n        var positions = new Float32Array( this.PARTICLES * 3 );\n        var p = 0;\n        for ( var i = 0; i < this.PARTICLES; i++ ) {\n            positions[ p++ ] = 0;\n            positions[ p++ ] = 0;\n            positions[ p++ ] = 0;\n        }\n\n        // uv情報の決定。テクスチャから情報を取り出すときに必要\n        var uvs = new Float32Array( this.PARTICLES * 2 );\n        p = 0;\n        for ( var j = 0; j < this.WIDTH; j++ ) {\n            for ( var i = 0; i < this.WIDTH; i++ ) {\n                uvs[ p++ ] = i / ( this.WIDTH - 1 );\n                uvs[ p++ ] = j / ( this.WIDTH - 1 );\n            }\n        }\n\n        // attributeをgeometryに登録する\n        this.geometry.addAttribute( 'position', new THREE.BufferAttribute( positions, 3 ) );\n        this.geometry.addAttribute( 'uv', new THREE.BufferAttribute( uvs, 2 ) );\n\n\n        // uniform変数をオブジェクトで定義\n        // 今回はカメラをマウスでいじれるように、計算に必要な情報もわたす。\n        this.particleUniforms = {\n            texturePosition: { value: null },\n            textureVelocity: { value: null },\n            cameraConstant: { value: this.getCameraConstant( this.camera ) },\n            map: { value: new THREE.TextureLoader().load( \"texture/circle.png\" ) }\n        };\n\n\n\n        // Shaderマテリアル これはパーティクルそのものの描写に必要なシェーダー\n        var material = new THREE.ShaderMaterial( {\n            uniforms:       this.particleUniforms,\n            // transparent:true,\n            // blending : THREE[ \"AdditiveBlending\" ],\n            vertexShader:   document.getElementById( 'particleVertexShader' ).textContent,\n            fragmentShader: document.getElementById( 'particleFragmentShader' ).textContent\n        });\n        material.extensions.drawBuffers = true;\n        var particles = new THREE.Points( this.geometry, material );\n        particles.matrixAutoUpdate = false;\n        particles.position.set(-45,90,40);\n        particles.updateMatrix();\n\n        // パーティクルをシーンに追加\n        this.scene.add( particles );\n    }\n\n\n    private fillTextures( texturePosition, textureVelocity ) {\n\n        // textureのイメージデータをいったん取り出す\n        var posArray = texturePosition.image.data;\n        var velArray = textureVelocity.image.data;\n\n        // パーティクルの初期の位置は、ランダムなXZに平面おく。\n        // 板状の正方形が描かれる\n\n        let offsetrad = 0.0;\n        for ( var k = 0, kl = posArray.length; k < kl; k += 4 ) {\n            // Position\n            offsetrad += 0.01;\n            var x, y, z;\n            // x = Math.random()*500-250;\n            // z = Math.random()*500-250;\n            // y = 0;\n\n            let rad = 100;\n            x = Math.cos(offsetrad) * rad;\n            z = Math.sin(offsetrad) * rad;\n            y = Math.sin(offsetrad*0.3) * rad * 0.3;\n\n            let range = 100;\n            x = Math.random()*range-range/2;\n            y = Math.random()*range-range/2;\n            y = Math.random()*500;\n            z = Math.random()*range-range/2;\n            // posArrayの実態は一次元配列なので\n            // x,y,z,wの順番に埋めていく。\n            // wは今回は使用しないが、配列の順番などを埋めておくといろいろ使えて便利\n            posArray[ k + 0 ] = x;\n            posArray[ k + 1 ] = y;\n            posArray[ k + 2 ] = z;\n            posArray[ k + 3 ] = Math.random()*100;\n\n            // 移動する方向はとりあえずランダムに決めてみる。\n            // これでランダムな方向にとぶパーティクルが出来上がるはず。\n            velArray[ k + 0 ] = Math.random()*2-1;\n            velArray[ k + 1 ] = Math.random()*2-1;\n            velArray[ k + 2 ] = Math.random()*2-1;\n            velArray[ k + 3 ] = Math.random()*2-1;\n        }\n    }\n\n    public loadModel()\n    {\n        var onProgress = function ( xhr ) {\n            if ( xhr.lengthComputable ) {\n                var percentComplete = xhr.loaded / xhr.total * 100;\n                console.log( Math.round(percentComplete, 2) + '% downloaded' );\n            }\n        };\n\n        var gridHelper = new THREE.GridHelper( 400, 40, 0x0000ff, 0x808080 );\n        // gridHelper.position.y = - 150;\n        // gridHelper.position.x = - 150;\n        this.scene.add( gridHelper );\n\n        // var material = new THREE.Material({\n        //     shading:THREE.FlatShading\n        // })\n        var onError = function ( xhr ) { };\n        THREE.Loader.Handlers.add( /\\.dds$/i, new THREE.DDSLoader() );\n        var mtlLoader = new THREE.MTLLoader();\n        mtlLoader.setPath( 'obj/' );\n        var _scene = this.scene;\n        mtlLoader.load ( 'female_head.mtl', function ( materials ) {\n            materials.preload();\n            var objLoader = new THREE.OBJLoader();\n            objLoader.setMaterials( materials );\n            objLoader.setPath( 'obj/' );\n            objLoader.load( 'female_head.obj', function ( object:THREE.Mesh ) {\n                object.position.y = - 95;\n                console.log(object.children[0]);\n                object.position.y = 30;\n                object.children[0].material.shading = THREE.FlatShading;\n                // for(let i = 0; i < object.children[0].material.materials.length; i++)\n                // {\n                //     object.children[0].material.materials[i].wireframe = true;\n                // }\n\n                // object.children[0].drawMode = 3;\n                // object.material.wireframe = true;\n                // object.children[0].\n                _scene.add( object);\n            }, onProgress, onError );\n        });\n    }\n\n    public click()\n    {\n\n    }\n\n    public keyDown(keycode)\n    {\n\n    }\n\n\n    private getCameraConstant( camera:THREE.Camera ) {\n        return window.innerHeight / ( Math.tan( THREE.Math.DEG2RAD * 0.5 * camera.fov ) / camera.zoom );\n    }\n\n\n    // ワンフレームごとの処理\n    public update() {\n        this.time += 0.01;\n        this.gpuCompute.compute();\n        this.particleUniforms.texturePosition.value = this.gpuCompute.getCurrentRenderTarget( this.positionVariable ).texture;\n        this.particleUniforms.textureVelocity.value = this.gpuCompute.getCurrentRenderTarget( this.velocityVariable ).texture;\n        this.velocityVariable.material.uniforms.time.value = this.time;\n        this.positionVariable.material.uniforms.time.value = this.time;\n        let scale = 10.0;\n        this.positionVariable.material.uniforms.pre_emitterPos.value = this.positionVariable.material.uniforms.emitterPos.value;\n        this.positionVariable.material.uniforms.emitterPos.value = new THREE.Vector3(this.simplex.noise3D(this.time, 0, 0)*scale,this.simplex.noise3D(0, this.time, 0)*scale,this.simplex.noise3D(0, 0, this.time)*scale);\n\n    }\n\n\n}\n\n"]}